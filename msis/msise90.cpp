#include <stdio.h>
#include <math.h>
#include "msise90.h"

/* Common Block Declarations */

struct {
    doublereal tlb, s, db04, db16, db28, db32, db40, db48, db01, za, t0, z0, 
	    g0, rl, dd, db14, tr12;
} gts3c_;

#define gts3c_1 gts3c_

struct {
    doublereal tn1[5], tn2[4], tn3[5], tgn1[2], tgn2[2], tgn3[2];
} meso6_;

#define meso6_1 meso6_

struct lower6_1_ {
    doublereal ptm[10], pdm[80]	/* was [10][8] */;
};

#define lower6_1 (*(struct lower6_1_ *) &lower6_)

struct parm6_1_ {
    doublereal pt[150], pd[1350]	/* was [150][9] */, ps[150], pdl[50]	
	    /* was [25][2] */, ptl[400]	/* was [100][4] */, pma[1000]	/* 
	    was [100][10] */;
};
struct parm6_2_ {
    doublereal pt1[50], pt2[50], pt3[50], pa1[50], pa2[50], pa3[50], pb1[50], 
	    pb2[50], pb3[50], pc1[50], pc2[50], pc3[50], pd1[50], pd2[50], 
	    pd3[50], pe1[50], pe2[50], pe3[50], pf1[50], pf2[50], pf3[50], 
	    pg1[50], pg2[50], pg3[50], ph1[50], ph2[50], ph3[50], pi1[50], 
	    pi2[50], pi3[50], pj1[50], pj2[50], pj3[50], pk1[50], pl1[50], 
	    pl2[50], pm1[50], pm2[50], pn1[50], pn2[50], po1[50], po2[50], 
	    pp1[50], pp2[50], pq1[50], pq2[50], pr1[50], pr2[50], ps1[50], 
	    ps2[50], pu1[50], pu2[50], pv1[50], pv2[50], pw1[50], pw2[50], 
	    px1[50], px2[50], py1[50], py2[50], pz1[50], pz2[50];
};

#define parm6_1 (*(struct parm6_1_ *) &parm6_)
#define parm6_2 (*(struct parm6_2_ *) &parm6_)

struct datim6_1_ {
    integer isd[3], ist[2], nam[2];
};
struct datim6_2_ {
    integer isdate[3], istime[2], name__[2];
};

#define datim6_1 (*(struct datim6_1_ *) &datim6_)
#define datim6_2 (*(struct datim6_2_ *) &datim6_)

struct {
    integer isdate[3], istime[2], name__[2];
} datime_;

#define datime_1 datime_

struct {
    doublereal sw[25], swc[25];
    integer isw;
} csw_;

#define csw_1 csw_

struct mavg6_1_ {
    doublereal pavgm[10];
};

#define mavg6_1 (*(struct mavg6_1_ *) &mavg6_)

struct {
    doublereal dm04, dm16, dm28, dm32, dm40, dm01, dm14;
} dmix_;

#define dmix_1 dmix_

struct {
    doublereal gsurf, re;
} parmb_;

#define parmb_1 parmb_

struct metsel_1_ {
    integer imr;
};

#define metsel_1 (*(struct metsel_1_ *) &metsel_)

union {
    struct {
	doublereal tinfg, gb, rout, tt[15];
    } _1;
    struct {
	doublereal tinf, gb, rout, t[15];
    } _2;
} ttest_;

#define ttest_1 (ttest_._1)
#define ttest_2 (ttest_._2)

union {
    struct {
	doublereal plg[36]	/* was [9][4] */, ctloc, stloc, c2tloc, 
		s2tloc, c3tloc, s3tloc, day, df, dfa, apd, apdf, apt[4], 
		xlong, clong, slong;
	integer iyr;
    } _1;
    struct {
	doublereal plg[36]	/* was [9][4] */, ctloc, stloc, c2tloc, 
		s2tloc, c3tloc, s3tloc, day, df, dfa, apd, apdf, apt[4], 
		long__, clong, slong;
	integer iyr;
    } _2;
} lpoly_;

#define lpoly_1 (lpoly_._1)
#define lpoly_2 (lpoly_._2)

struct {
    integer mp, ii, jg, lt;
    doublereal qpb[50];
    integer ierr, ifun, n, j;
    doublereal dv[60];
} lsqv_;

#define lsqv_1 lsqv_

struct {
    doublereal taf;
} fit_;

#define fit_1 fit_

/* Initialized data */

struct {
    integer e_1;
    } metsel_ = { 0 };

struct {
    doublereal e_1[90];
    } lower6_ = { 1041.3, 386., 195., 16.6728, 213., 120., 240., 187., -2., 
	    0., 2.456e7, 6.71072e-6, 100., 0., 110., 10., 0., 0., 0., 0., 
	    8.594e10, .54, 105., -8., 110., 10., 90., 2., 0., 0., 2.81e11, 0.,
	     105., 28., 28.95, 0., 0., 0., 0., 0., 3.3e10, .26827, 105., 0., 
	    110., 10., 0., 0., 0., 0., 1.33e9, .0119615, 105., 0., 110., 10., 
	    0., 0., 0., 0., 176100., 1., 95., -8., 110., 10., 90., 2., 0., 0.,
	     1e7, 1., 105., -8., 110., 10., 90., 2., 0., 0., 1e7, 1., 105., 
	    -8., 110., 10., 90., 2., 0., 0. };

struct {
    doublereal e_1[3100];
    } parm6_ = { .99604, .0385528, .00303445, -.105531, -.00607134, 
	    -5.16278e-4, -.115622, .0020224, .00990156, -.127371, -.0302449, 
	    .0123512, -.00526277, -8.45398, 0., .014237, 0., 125.818, 
	    .00805486, .00164419, -6.21452e-6, .00311701, 0., .00386578, 
	    .132397, .213315, 0., 0., 0., -6.4111e-6, 0., 30.015, .00533297, 
	    .00389146, .00204725, 0., 0., -.0192645, 2.75905, .00147284, 
	    3.41345e-4, -.00117388, -3.54589e-4, .113139, .169134, .00508295, 
	    3.65016e-5, .00426385, 1.15102e-4, .00511819, .00609108, 
	    4.04995e-5, .00153049, 2.4147e-5, .00230764, .00155267, .00133722,
	     -.00182318, -263.007, 0., .00137337, 9.95774e-4, 0., -108.983, 
	    .00562606, .00594053, .00109358, 0., -.013341, -.0243409, 
	    -.0135688, 31137., 0., 0., 0., -2830.23, 8.45583e-4, 5.38706e-4, 
	    0., 247.956, .00292246, 0., 0., 7.47703e-5, 8.87993e-4, 0., 0., 
	    0., 0., 0., -.011654, -.00449173, -3.53189e-4, -1.73933e-4, 
	    -1.53218e-4, -.565411, .00777272, -91.1784, 6.45187e-4, 0., 
	    -8.37685e-4, .00242318, .00473796, -.00301801, -.00423564, 
	    -.00248289, 9.19286e-4, .00216372, 8.63968e-4, .00189689, 
	    .00415654, 0., .0118068, .0033119, 0., .00120222, 0., 0., 
	    -3.07246, 0., 0., 6.72403e-4, .0010893, 9.72278e-4, 4.68242, 
	    -3.15034e-4, .00400059, .00515036, .00162989, .00108824, 
	    9.95261e-4, 4.18955, -.364059, .00170182, 0., 0., -3.2012, 0., 
	    .00580206, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.04934, 
	    -.0288362, -.207095, -.103314, -.00702373, .0129664, .408853, 
	    -.00919895, -.018866, 1.40927, .175033, .0187351, .110979, 
	    -7.42871, 0., .267143, -.0595979, 105.038, -.0840963, -6.97632e-4,
	     2.06521e-6, 7.65306e-4, 0., 0., .126762, .128876, -.0504479, 
	    -.0130735, -.0224348, 0., 0., -150.832, -.00629928, 0., -.0040776,
	     0., 0., .0525725, -31.1486, -.00313351, .00275838, 0., 0., 
	    .111247, .108815, -.0466713, 0., -.00329329, 0., .00167838, 
	    -.00916691, 3.45044e-5, -.00971806, 0., -.00204672, -.00786899, 
	    -.00798285, .00536515, -5311.72, 0., -.00642781, -.0017169, 0., 
	    -67.9131, -.0179912, -.0158305, -.00712313, 0., .0253477, .085296,
	     .102163, 29500.9, 0., 0., 0., -6846.25, -.00619098, -.00269289, 
	    0., -520.231, -.00633463, 0., 0., -.00602428, -.00407077, 
	    .00542264, 0., 0., 0., 0., .040756, .0282288, .00908088, 0., 0., 
	    -.405204, -.0597931, -73.1823, -.0020662, 0., -.00372723, 
	    -.0188146, -.0101794, .00804633, .010109, .00873253, .0238268, 
	    .00480444, .00171088, .0396369, -.0213809, 0., -.102588, 
	    -.00591702, 0., .00270923, 0., 0., -175.043, .603489, -.617589, 
	    .00838098, .00183871, -7.05329e-4, -4.06644, -.00509347, 
	    -.0284344, -.012416, .0133665, .0039341, -5.03723e-4, -4.57683, 
	    -.529542, -.00425812, 0., 0., 19.1541, 0., .00323247, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., .931113, -.138721, -.133457, 
	    -.0529542, -.00444983, .0135264, .0598075, -.036288, -.0312798, 
	    .372068, .0295974, .0120509, .0521995, -7.78888, 0., .118634, 
	    -.0204495, 103.28, .0982432, 4.77694e-4, 0., .00274372, 0., 0., 
	    .0757809, .171403, -.0105205, 0., 0., 0., 0., -8.73348, 
	    -.00581094, 0., -.00814944, 0., 0., .0517255, -15.3028, 
	    -.00348932, 9.61771e-4, .00557732, -4.5418e-4, .0988213, .0940456,
	     -.0318797, 0., 0., 0., .00232122, -.0060022, 2.77654e-5, 
	    -.00322019, 0., -.00378551, -.00334809, -.00170668, 0., 6361.84, 
	    0., .00159986, -.00388204, -.00164825, -74.7955, -.010536, 
	    -.00945723, -.00159824, -7.0673e-4, -.0168513, -.113023, 
	    -.0636637, -13770.9, 0., 0., 0., -15236.8, -.00586061, -.00253108,
	     0., -2548.37, -.00328988, 0., 0., -.00276364, .00967923, 0., 0., 
	    0., 0., 0., .0434255, .011402, -.00618447, 0., 0., -.302568, 
	    -.0327694, -67.1589, -.0022834, 0., .0030623, -.00465113, 
	    -.00973421, .0128326, .00788553, .00797197, -.012076, -.00767547, 
	    -.00120755, -.0298523, -.012656, 0., -.056835, -.0153039, 0., 0., 
	    0., 0., 0., 0., 0., .00242911, -.00401347, -.00219074, 3.11281, 
	    .00323251, -.00639523, -.00663069, -3.04403e-4, -.0040192, 
	    -.00118708, 4.15211, -.201896, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 1.06903, 0., 0., .0036621, 0., 
	    .0190412, -.00178929, 0., -.0392257, -.119444, 0., 0., 0., 
	    -8.45398, 0., .020818, 0., 139.638, .0898481, 0., 0., 3.77113e-4, 
	    0., 0., .132397, .213315, 0., 0., 0., 0., 0., -23.6325, 0., 0., 
	    0., 0., 0., 0., 0., -.00243022, -3.99776e-6, .00632343, .00548144,
	     .113139, .169134, 0., 0., 0., 0., 0., 0., 2.4147e-5, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    .976619, 0., 0., -.02002, 0., -.00938391, -.00195833, 0., .013148,
	     -.0192414, 0., 0., 0., -8.45398, 0., .0107674, 0., 89.382, 0., 
	    0., 0., 5.68478e-4, 0., 0., .132397, .213315, 0., 0., 0., 0., 0., 
	    0., .00466814, 0., 0., 5.11651e-5, .00255717, 0., 0., 0., 0., 
	    -.00260147, -8.08556e-4, .113139, .169134, .00664196, 0., 0., 0., 
	    0., .00582026, 2.4147e-5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., .00621998, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., .931402, .137976, 0., 
	    3.23736e-4, 0., -.00910906, .0707506, 0., -.051665, .0689755, 0., 
	    0., 0., -8.45398, 0., .028114, 0., 73.6009, .0596604, 0., 0., 
	    -.00151792, 0., 0., .132397, .213315, 0., 0., 0., 0., 0., 9.48758,
	     .00884541, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .113139, 
	    .169134, .0145192, 0., 0., 0., 0., .0107906, 2.99942e-5, 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -.014893, -.00787184, 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., -.068342, -.0441778, 0., 0., 0., 0., 
	    .022973, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., .868053, .236364, .134306, .0103086, 
	    0., -.00379164, -.157806, 0., -.0587644, -.312508, 0., .0437387, 
	    -.0354091, -22.3636, 0., -.0533976, 0., 114.091, .0517497, 0., 0.,
	     0., 0., 0., .132397, .213315, 0., 0., 0., 0., 0., 342.702, 
	    .0157033, 0., 0., 0., 0., 0., 0., -.00366278, -.00116193, 0., 0., 
	    .113139, .169134, .0178431, 0., 0., 0., 0., .0162864, 3.16963e-5, 
	    .0127968, 0., 0., -.00704599, .00207921, .0063666, 22994., 0., 
	    .0127833, -.00208036, -.0046182, -62.9391, -.0120745, .0136675, 
	    .0136011, -.00537162, 0., 0., 0., 0., 0., 0., 0., 19250.9, 
	    .00835522, .00419439, 0., 12036.6, 0., 0., 0., -.0100034, 
	    -.00233267, .00972374, 0., 0., 0., 0., -.0265079, -.0209125, 
	    -.0109465, 0., 0., 0., .0217252, -71.2385, -.00189428, 0., 
	    -.00602006, .0169058, 0., 0., 0., 0., 0., 0., 0., .0290646, 
	    .00348971, 0., .0501174, .0550595, 0., -.00955897, 0., 0., 
	    -1516.93, 0., 0., .0129306, .00269567, 0., 3.92243, -.0084769, 
	    .0116896, 0., .0148967, .00544521, 0., 5.64918, 0., -.00772178, 
	    0., 0., -73.4042, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 1.27515, -.210472, -.177924, .2189, .0288436, .0190077, 
	    .291001, .0217437, -.0105186, .436141, .107605, .0330755, 
	    .0400581, -9.58051, 0., .0154028, 0., 73.4194, .049654, 
	    -.00595906, 3.84512e-5, -.0136, 0., 0., .132397, .213315, 
	    -.041661, 0., 0., 0., 0., 146.276, -.0198408, 0., .013253, 0., 0.,
	     0., 0., -1.04687e-4, -.00147562, 0., 0., .113139, .169134, 
	    -.0126913, 0., 0., 0., -.0060837, -.0257587, 3.19022e-5, 0., 0., 
	    .0156644, .010364, .00105771, 0., 3579.49, 0., -.00125672, 
	    .00152783, .00130518, 7.55558, -.00920341, -.0209142, -.0134106, 
	    0., -.0483312, .08309, .0988009, -14114.8, 0., 0., 0., -1055.13, 
	    0., 0., 0., 0., 0., 0., 0., .00673442, .00201691, 0., 0., 0., 0., 
	    0., .0598019, .00633298, -.00112871, 0., 0., 0., -.0128604, 0., 
	    0., 0., -.0049496, -.0136415, -.0115039, 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -.0058686, 
	    -.00141732, .00213697, 2.63845, -.00834186, -.0187336, -.019087, 
	    -.0080381, -.00284279, .00256722, 1.71429, 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 57.3587, 
	    -.398747, 0., -.529554, -.00582186, .0714177, -.679279, -.167715, 
	    -.0642434, -.211569, -.159922, -1.71024e-4, -.115885, 6.51603, 0.,
	     -.176683, .0650395, 1.43504, .0928208, .00511662, 0., .00995121, 
	    0., 0., .132397, .213315, .101451, 0., 0., 0., 0., 56.7667, 
	    .00238192, 0., -.018824, 0., 0., .0476218, 23.5206, .00475901, 
	    .00576162, .0151815, -.019273, .113139, .169134, -.0288771, 0., 
	    0., 0., .00118418, -.00368927, 3.14704e-5, .00882198, 0., 
	    -.0192562, -.00258674, -.0219913, 0., 4386.55, 0., .00760126, 
	    .00259438, .0017231, 77.9204, 7.97786e-4, -.0077051, .00190982, 
	    .00272707, .0101016, .116537, -.00312236, 13978.3, 0., 0., 0., 
	    -1307.12, 0., 0., 0., 0., 0., 0., 0., -.00320544, -.020697, 0., 
	    0., 0., 0., 0., .015901, -.00191427, -.0342829, 0., 0., 0., 
	    -.0345379, 89.4518, .00171556, 0., -.00765278, -2.08987e-4, 
	    -.0157393, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., -.00860673, -.0119922, -.00646356, -3.00107, 
	    -.00932511, -.0150205, -.00867835, -.00764801, -.0131495, 
	    -.0067672, -1.82396, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., -8.45398, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    .132397, .213315, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., .113139, .169134, 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., .951363, -.0467542, .12026, 0., 0., .0191357, 0., 0., 
	    .00125429, -.13324, 0., 0., 0., -8.45398, 0., 0., 0., 0., 0., 0., 
	    0., .00252317, 0., -.00973404, .132397, .213315, 0., 0., 0., 0., 
	    0., 0., 0., -7.18482e-4, 0., 0., 0., 0., 0., 0., 0., .00787683, 
	    -.00233698, .113139, .169134, 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    .933804, 5.47446, .153263, .919303, 16.4109, 4.27083, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    .140925, 1.15897, .471094, 1.09459, 5.25012, 1., 1., 1.03999, 
	    .767132, 1.10514, 1.75636, 1.10845, 2.33439, .796532, 4.3152, 
	    4.073, 122.807, .239547, 2.53791e-6, .842931, 1.04192, 2.00202, 
	    1., 1., 1., .962736, 1.02083, .0408449, -.0234582, 4.38274e-4, 
	    -.015238, -.0209089, .00446355, -.0034125, -.0112961, -.0703277, 
	    -.0482724, 0., 0., -6.20496, 0., -.00980197, -.0145065, -113.226, 
	    .0228455, 0., 0., 4.93658e-4, 0., .00379078, .132397, .213315, 0.,
	     0., 0., 0., 0., -8890.51, .002259, .00176142, 0., 0., 0., 0., 0.,
	     -2.55015e-4, .00221388, -5.99073e-4, -.00352331, .113139, 
	    .169134, .00779156, -.00193458, -.0108596, -4.39285e-4, 0., 
	    .00383994, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    .00676608, 0., 0., 0., .92488, .0741986, -.00637629, .00600575, 
	    .00129382, .0069755, -.00170782, .00280584, -.00887214, -.0435703,
	     0., 0., 0., 4.31515, 0., -.0181474, -.0606627, -84.3503, 
	    .00846944, 0., 0., 0., -.0217081, -.002195, .132397, .213315, 0., 
	    0., 0., 0., 0., 247.58, .00441585, .00780466, 0., 0., 0., 0., 0., 
	    6.44155e-4, -.00249166, .00290482, -3.40501e-4, .113139, .169134, 
	    -.0060146, -.00163368, 0., -.0043134, 0., .00453979, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -.0054366, 0., 0., 0., 
	    .972669, -.0426748, .0112876, -.00844951, .00704114, .0126036, 
	    -.00388164, -5.20509e-4, -6.0971e-4, .131603, .113804, 0., 0., 
	    -6.1597, 0., -.0214214, -.0662913, -.202884, .023535, 0., 0., 0., 
	    .0113573, -.00184905, .132397, .213315, 0., 0., 0., 0., 0., 
	    1.42645, -.00264405, -5.57771e-4, 0., 0., 0., 0., -22.0621, 
	    -.00110313, 3.97063e-5, 5.47632e-5, .00357577, .113139, .169134, 
	    0., .00118897, 0., 7.62305e-4, 0., -.00352015, 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., -9.5255e-4, 8.56253e-4, 
	    4.33114e-4, 0., 0., 0., 0., 0., 0., 0., .00121223, 2.38694e-4, 
	    9.15245e-4, .00128385, 8.67668e-4, -5.61425e-6, 1.04445, 34.1112, 
	    0., -.840704, -239.639, .706668, -20.5873, -.363696, 23.9245, 10.,
	     -.00106657, -7.67292e-4, 1.54534e-4, 0., 0., 0., 0., 0., 0., 0., 
	    .999368, .0433893, -.00207009, .00109617, .0010544, 4.83408e-4, 
	    9.7704e-4, 9.24791e-4, 4.80247e-4, .0494737, .00105985, 0., 0., 
	    2.74409, 0., -.00496656, -.0151684, 46.5158, -.00751133, 0., 0., 
	    0., 0., 6.63808e-4, .132397, .213315, -.00206652, -.00632046, 0., 
	    0., .00594545, -190.958, 0., -.00416892, 0., -.0167499, 0., 
	    .00258987, 597.781, 0., 0., 4.4489e-4, 4.66444e-4, .113139, 
	    .169134, 0., 7.1136e-4, .0132186, .00223948, 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .00160571, 6.28078e-4, 
	    5.05469e-5, 0., 0., 0., 0., 0., 0., 0., -.00157829, -4.00855e-4, 
	    5.04077e-5, -.00139001, -.00233406, -4.81197e-4, 1.46758, 6.20332,
	     0., .366476, -61.976, .309198, -19.8999, 0., -329.933, 0., 
	    -.0011008, -9.3931e-5, 1.39638e-4, 0., 0., 0., 0., 0., 0., 0., 
	    .981637, -.00141317, .0387323, 0., 0., 0., 0., 0., 0., -.0358707, 
	    -.00863658, 0., 0., -2.02226, 0., -.00869424, -.0191397, 87.6779, 
	    .00452188, 0., 0., 0., 0., 0., 0., 0., -.00707572, 0., 0., 0., 
	    -.0041121, 35.006, 0., 0., 0., .022376, 0., -.00836657, 16.1347, 
	    0., 0., 0., 0., 0., 0., 0., 0., -.014513, 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .00124152, 6.43365e-4, 0.,
	     0., 0., 0., 0., 0., 0., 0., .00133255, .00242657, .00160666, 
	    -.00185728, -.00146874, -4.79163e-6, 1.22464, 35.351, 0., .449223,
	     -47.7466, .470681, 8.41861, -.288198, 167.854, 0., 7.11493e-4, 
	    6.05601e-4, 0., 0., 0., 0., 0., 0., 0., 0., 1.00422, -.00711212, 
	    .0052448, 0., 0., 0., 0., 0., 0., -.0528914, -.0241301, 0., 0., 
	    -21.2219, 0., -.00328077, .0165727, 1.68564, -.00668154, 0., 0., 
	    0., .00842365, 0., 0., 0., -.00434645, -.010383, -.00808279, 
	    .021678, 0., -138.459, 0., 0., 0., .0145155, 0., .00704573, 
	    -47.3204, 0., 0., 0., 0., 0., 0., 0., 0., .0108767, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 5.21769e-4, 
	    -2.27387e-4, 0., 0., 0., 0., 0., 0., 0., 0., .00326769, .00316901,
	     4.60316e-4, -1.01431e-4, .00102131, 9.96601e-4, 1.25707, 25.0114,
	     0., .424472, -27.7655, .344625, 27.5412, 0., 794.251, 0., 
	    .00245835, .00138871, 0., 0., 0., 0., 0., 0., 0., 0., 1.0189, 
	    -.0246603, .0100078, 0., 0., 0., 0., 0., 0., -.0670977, -.0402286,
	     0., 0., -22.9466, 0., .0022658, .0263931, 37.2625, -.00639041, 
	    0., 0., 0., 0., 0., 0., 0., -.00185291, -.00747019, -.00707265, 
	    0., 0., 139.717, 0., 0., 0., .00958383, 0., .00919771, -369.121, 
	    0., 0., 0., 0., 0., 0., 0., 0., -.0157067, 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -.00292953, -.00277739, 
	    -4.40092e-4, 0., 0., 0., 0., 0., 0., 0., .0024728, 2.95035e-4, 
	    -.00181246, .00281945, .00427296, 9.78863e-4, 1.40545, -6.19173, 
	    0., 0., -79.3632, .444643, -403.085, 0., 11.5603, 0., .00225068, 
	    8.48557e-4, -2.98493e-4, 0., 0., 0., 0., 0., 0., 0., .975801, 
	    .038068, -.0305198, 0., 0., 0., 0., 0., 0., .0385575, .0504057, 
	    0., 0., -176.046, 0., -.00148297, -.0036856, 30.2185, -.00323338, 
	    0., 0., 0., -.0115558, 0., 0., 0., .0048962, .0144594, .00991215, 
	    -.0100616, -.00821324, -157.757, 0., 0., 0., .0153569, 0., 
	    .00663564, 45.841, 0., 0., 0., 0., 0., 0., 0., 0., -.025128, 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    -8.73148e-4, -.00129648, -7.32026e-5, 0., 0., 0., 0., 0., 0., 0., 
	    -.0046811, -.00466003, -.00131567, -7.3939e-4, 6.32499e-4, 
	    -4.65588e-4, -1.29785, -157.139, 0., .25835, -36.9453, .410672, 
	    9.78196, -.152064, -3850.84, 0., -8.52706e-4, -.00140945, 
	    -7.26786e-4, 0., 0., 0., 0., 0., 0., 0., .960722, .0703757, 
	    -.0300266, 0., 0., 0., 0., 0., 0., .0222671, .0410423, 0., 0., 
	    -163.07, 0., 5.40747e-4, .00779481, 144.908, 1.51484e-4, 0., 0., 
	    0., -.0141844, 0., 0., 0., .00577884, .0106073, .00536685, 
	    .00974319, 0., -2880.15, 0., 0., 0., .0197547, 0., -.00444902, 
	    -29.276, 0., 0., 0., 0., 0., 0., 0., 0., .0234419, 0., 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -4.65325e-4, 
	    -5.50628e-4, 3.31465e-4, 0., 0., 0., 0., 0., 0., 0., -.00206179, 
	    -.00308575, -7.93589e-4, -1.08629e-4, 5.95511e-4, -9.0505e-4, 
	    1.18997, 41.5924, 0., -.472064, -947.15, .398723, 19.8304, 0., 
	    3732.19, 0., -.0015004, -.00114933, -1.56769e-4, 0., 0., 0., 0., 
	    0., 0., 0., 1.03123, -.0705124, .00871615, 0., 0., 0., 0., 0., 0.,
	     -.0382621, -.00980975, 0., 0., 28.9286, 0., 0., 0., 86.6153, 
	    7.91938e-4, 0., 0., 0., .00468917, 0., 0., 0., .00786638, 
	    .00957341, .00572268, .00990827, 0., 65.5573, 0., 0., 0., 0., 0., 
	    0., -40.02, 0., 0., 0., 0., 0., 0., 0., 0., .00707457, 0., 0., 0.,
	     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -2.0497e-4, 
	    .0012156, -8.05579e-6, 0., 0., 0., 0., 0., 0., 0., -.00249941, 
	    -4.57256e-4, -1.59311e-4, 2.96481e-4, -.00177318, -6.37918e-4, 
	    1.02395, 12.8172, 0., .149903, -26.3818, 0., 47.0628, -.222139, 
	    .0482292, 0., -8.67075e-4, -5.86479e-4, 5.32462e-4, 0., 0., 0., 
	    0., 0., 0., 0., 1.00828, -.0910404, -.0226549, 0., 0., 0., 0., 0.,
	     0., -.023242, -.00908925, 0., 0., 33.6105, 0., 0., 0., -12.4957, 
	    -.00587939, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    27.9765, 0., 0., 0., 0., 0., 0., 2012.37, 0., 0., 0., 0., 0., 0., 
	    0., 0., -.0175553, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
	     0., 0., 0., 0., .00329699, .00126659, 2.68402e-4, 0., 0., 0., 0.,
	     0., 0., 0., .00117894, .00148746, 1.06478e-4, 1.34743e-4, 
	    -.00220939, -6.23523e-4, .636539, 11.3621, 0., -.393777, 2386.87, 
	    0., 661.865, -.121434, 9.27608, 0., 1.68478e-4, .00124892, 
	    .00171345, 0., 0., 0., 0., 0., 0., 0., 1.57293, -.6784, .6475, 0.,
	     0., 0., 0., 0., 0., -.0762974, -.360423, 0., 0., 128.358, 0., 0.,
	     0., 46.8038, 0., 0., 0., 0., 0., 0., 0., 0., -.167898, 0., 0., 
	    0., 0., 29099.4, 0., 0., 0., 0., 0., 0., 31.5706, 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., .866492, .355807, 0., 0., 0., 
	    0., 0., 0., 0., -1.12111, 0., 0., 0., 1.82458, 0., 0., 0., 
	    101.024, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    654.251, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -.0156959, 
	    .0191001, .0315971, .0100982, -.00671565, .00257693, 1.38692, 
	    .282132, 0., 0., 381.511, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
	    0., 0., 0., 0., 0., 1.06029, -.0525231, .373034, 0., 0., 0., 0., 
	    0., 0., .0331072, -.388409, 0., 0., -165.295, 0., -.0438916, 
	    -.322716, -88.2393, .118458, 0., 0., 0., 0., 0., 0., 0., -.119782,
	     -.213801, 0., 0., 0., 26.2229, 0., 0., 0., -.435863, 0., 0., 
	    -53.7443, 0., 0., 0., 0., 0., 0., 0., 0., -.455788, 0., 0., 0., 
	    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .0384009, 
	    .0396733, 0., 0., 0., 0., 0., 0., 0., 0., .0505494, .0739617, 
	    .01922, -.00846151, -.0134244, .0196338, 1.50421, 18.8368, 0., 0.,
	     -51.3114, 0., 0., 0., 0., 0., .0511923, .0361225, 0., 0., 0., 0.,
	     0., 0., 0., 0. };

struct {
    char e_1[28];
    integer e_2;
    } datim6_ = { "12-MAR-90 15:09:04MSISE 90", 0 };

struct {
    doublereal e_1[10];
    } mavg6_ = { 261., 264., 229., 217., 217., 223., 286.76, -2.9394, 2.5, 0. 
	    };


/* Table of constant values */

static integer c__1 = 1;
static doublereal c_b14 = 1.;
static integer c__0 = 0;
static integer c__48 = 48;
static integer c__2 = 2;
static doublereal c_b36 = 1e3;
static doublereal c_b44 = 28.;
static doublereal c_b45 = 0.;
static doublereal c_b46 = -1.;
static doublereal c_b55 = 4.;
static doublereal c_b56 = -.4;
static doublereal c_b58 = -1.4;
static doublereal c_b61 = 16.;
static doublereal c_b67 = 32.;
static doublereal c_b73 = 40.;
static doublereal c_b85 = 14.;
static doublereal c_b104 = .5;
static doublereal c_b114 = 2.;
static integer c__9 = 9;
static integer c__5 = 5;

/* I am forwarding to you the latest version of the MSIS model for your */
/* analysis work. I would appreciate your bringing any problems you might */
/* discover to my attention.  I would also appreciate hearing about your */
/* results using this model. */

/* Alan E. Hedin, 10/9/90 */
/* PACF::HEDIN */
/* (301)-286-8393 */

/* Contents:  MSIS FORTRAN SUBROUTINE GTD6 */
/*            FORTRAN TEST DRIVER */
/*            OUTPUT OF TEST */
/* ================================================================== */
/* Version: 22-JUL-1991 15:59:42.72 */

/* This version includes SAVE statements and new driver and test data. */

/* NOTE: This model is NOT an upgrade for the upper thermosphere and is */
/*       probably less efficient than MSIS86. */
/* ================================================================== */
/* Version: 10-MAR-1993 15:31:11.76 */

/* Changing to density per cubic meter instead of per cubic centimeter */
/* did under certain particular conditions result in erroneous density */
/* by less than a percent (wrong entry name) when first (and only */
/* first) calling subroutine GTD6. This was corrected. */

/* ================================================================== */

/* Contents:  MSIS FORTRAN SUBROUTINE GTD6 */
/*            FORTRAN TEST DRIVER */
/*            OUTPUT OF TEST */

/* ---------------------------------------------------------------- */
/* Subroutine */ int gtd6_(integer *iyd, doublereal *sec, doublereal *alt,
	doublereal *glat, doublereal *glong, doublereal *stl, doublereal *
	f107a, doublereal *f107, doublereal *ap, integer *mass, doublereal *
	d__, doublereal *t)
{
    /* Initialized data */

    static integer mn3 = 5;
    static doublereal zn3[5] = { 32.5,20.,15.,10.,0. };
    static integer mn2 = 4;
    static doublereal zn2[4] = { 72.5,55.,45.,32.5 };
    static doublereal zmix = 62.5;
    static doublereal alast = 99999.;
    static integer mssl = -999;
    static doublereal sv[25] = { 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,
	    1.,1.,1.,1.,1.,1.,1.,1.,1.,1. };

    /* System generated locals */
    doublereal d__1;

    /* Local variables */
    static doublereal dm28m, altt, xlat;
    extern doublereal vtst_(integer *, doublereal *, doublereal *, doublereal 
	    *, doublereal *, doublereal *, doublereal *, doublereal *, 
	    integer *);
    static integer i__, j;
    extern /* Subroutine */ int glatf_(doublereal *, doublereal *, doublereal 
	    *);
//    extern doublereal densm_();
    extern doublereal densm_(doublereal *alt, doublereal *d0, doublereal *xm, doublereal
	*tz, integer *mn3, doublereal *zn3, doublereal *tn3, doublereal *tgn3,
	 integer *mn2, doublereal *zn2, doublereal *tn2, doublereal *tgn2);
    static doublereal d6[8], v1, t6[2];
    extern doublereal glob6s_(doublereal *);
    static doublereal tz;
    extern /* Subroutine */ int tselec_(doublereal *);
    static doublereal dmc, dmr, dz28, xmm;
    static integer mss;
    extern /* Subroutine */ int gts6_(integer *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, integer *, doublereal *, doublereal *)
	    ;

/*        Neutral Atmosphere Empirical Model from the surface to lower */
/*          exosphere  MSISE90 (JGR, 96, 1159-1172, 1991) */
/*         A.E.Hedin 4/24/90;6/3/91(add SAVE) */
/*         2/11/93 correct switch initialization and mks calculation */
/*           See subroutine GHP6 to specify a pressure rather than */
/*           altitude. */
/*     INPUT: */
/*        IYD - YEAR AND DAY AS YYYYDDD or just DDD (day of year from 1 to 365) */
/*        SEC - UT(SEC) */
/*        ALT - ALTITUDE(KM) */
/*        GLAT - GEODETIC LATITUDE(DEG) */
/*        GLONG - GEODETIC LONGITUDE(DEG) */
/*        STL - LOCAL APPARENT SOLAR TIME(HRS) */
/*        F107A - 3 MONTH AVERAGE OF F10.7 FLUX */
/*        F107 - DAILY F10.7 FLUX FOR PREVIOUS DAY */
/*        AP - MAGNETIC INDEX(DAILY) OR WHEN SW(9)=-1. : */
/*           - ARRAY CONTAINING: */
/*             (1) DAILY AP */
/*             (2) 3 HR AP INDEX FOR CURRENT TIME */
/*             (3) 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME */
/*             (4) 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME */
/*             (5) 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME */
/*             (6) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR */
/*                    TO CURRENT TIME */
/*             (7) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR */
/*                    TO CURRENT TIME */
/*        MASS - MASS NUMBER (ONLY DENSITY FOR SELECTED GAS IS */
/*                 CALCULATED.  MASS 0 IS TEMPERATURE.  MASS 48 FOR ALL. */
/*     Note:  Ut, Local Time, and Longitude are used independently in the */
/*            model and are not of equal importance for every situation. */
/*            For the most physically realistic calculation these three */
/*            variables should be consistent (STL=SEC/3600+GLONG/15). */
/*            F107, F107A, and AP effects are not large below 80 km */
/*            and these can be set to 150., 150., and 4. respectively. */
/*     OUTPUT: */
/*        D(1) - HE NUMBER DENSITY(CM-3) */
/*        D(2) - O NUMBER DENSITY(CM-3) */
/*        D(3) - N2 NUMBER DENSITY(CM-3) */
/*        D(4) - O2 NUMBER DENSITY(CM-3) */
/*        D(5) - AR NUMBER DENSITY(CM-3) */
/*        D(6) - TOTAL MASS DENSITY(GM/CM3) */
/*        D(7) - H NUMBER DENSITY(CM-3) */
/*        D(8) - N NUMBER DENSITY(CM-3) */
/*        T(1) - EXOSPHERIC TEMPERATURE */
/*        T(2) - TEMPERATURE AT ALT */

/*      TO GET OUTPUT IN M-3 and KG/M3:   CALL METER6(.TRUE.) */

/*      O, H, and N set to zero below 72.5 km */
/*      Exospheric temperature set to average for altitudes below 120 km. */

/*           The following is for test and special purposes: */
/*            TO TURN ON AND OFF PARTICULAR VARIATIONS CALL TSELEC(SW) */
/*               WHERE SW IS A 25 ELEMENT ARRAY CONTAINING 0. FOR OFF, 1. */
/*               FOR ON, OR 2. FOR MAIN EFFECTS OFF BUT CROSS TERMS ON */
/*               FOR THE FOLLOWING VARIATIONS */
/*               1 - F10.7 EFFECT ON MEAN  2 - TIME INDEPENDENT */
/*               3 - SYMMETRICAL ANNUAL    4 - SYMMETRICAL SEMIANNUAL */
/*               5 - ASYMMETRICAL ANNUAL   6 - ASYMMETRICAL SEMIANNUAL */
/*               7 - DIURNAL               8 - SEMIDIURNAL */
/*               9 - DAILY AP             10 - ALL UT/LONG EFFECTS */
/*              11 - LONGITUDINAL         12 - UT AND MIXED UT/LONG */
/*              13 - MIXED AP/UT/LONG     14 - TERDIURNAL */
/*              15 - DEPARTURES FROM DIFFUSIVE EQUILIBRIUM */
/*              16 - ALL TINF VAR         17 - ALL TLB VAR */
/*              18 - ALL TN1 VAR           19 - ALL S VAR */
/*              20 - ALL TN2 VAR           21 - ALL NLB VAR */
/*              22 - ALL TN3 VAR           23 - TURBO SCALE HEIGHT VAR */

/*              To get current values of SW: CALL TRETRV(SW) */

    /* Parameter adjustments */
    --t;
    --d__;
    --ap;

    double c__0x = (double)c__0;    

    /* Function Body */
    if (csw_1.isw != 64999) {
	tselec_(sv);
    }
/*      Put identification data into common/datime/ */
    for (i__ = 1; i__ <= 3; ++i__) {
	datime_1.isdate[i__ - 1] = datim6_1.isd[i__ - 1];
/* L1: */
    }
    for (i__ = 1; i__ <= 2; ++i__) {
	datime_1.istime[i__ - 1] = datim6_1.ist[i__ - 1];
	datime_1.name__[i__ - 1] = datim6_1.nam[i__ - 1];
/* L2: */
    }

/* e        Test for changed input */
    v1 = vtst_(iyd, sec, glat, glong, stl, f107a, f107, &ap[1], &c__1);
/*       Latitude variation of gravity (none for SW(2)=0) */
    xlat = *glat;
    if (csw_1.sw[1] == 0.) {
	xlat = 45.;
    }
    glatf_(&xlat, &parmb_1.gsurf, &parmb_1.re);

    xmm = lower6_1.pdm[24];

/*       THERMOSPHERE/UPPER MESOSPHERE [above ZN2(1)] */
    altt = max(*alt,zn2[0]);
    mss = *mass;
/* e       Only calculate N2 in thermosphere if alt in mixed region */
    if (*alt < zmix && *mass > 0) {
	mss = 28;
    }
/* e       Only calculate thermosphere if input parameters changed */
/* e         or altitude above ZN2(1) in mesosphere */
    if (v1 == 1. || *alt > zn2[0] || alast > zn2[0] || mss != mssl) {
	gts6_(iyd, sec, &altt, glat, glong, stl, f107a, f107, &ap[1], &mss, 
		d6, t6);
	dm28m = dmix_1.dm28;
/*         metric adjustment */
	if (metsel_1.imr == 1) {
	    dm28m = dmix_1.dm28 * 1e6;
	}
	mssl = mss;
    }
    t[1] = t6[0];
    t[2] = t6[1];
    if (*alt >= zn2[0]) {
	for (j = 1; j <= 8; ++j) {
	    d__[j] = d6[j - 1];
/* L5: */
	}
	goto L10;
    }

/*       LOWER MESOSPHERE/UPPER STRATOSPHERE [between ZN3(1) and ZN2(1)] */
/*         Temperature at nodes and gradients at end nodes */
/*         Inverse temperature a linear function of spherical harmonics */
/* e        Only calculate nodes if input changed */
    if (v1 == 1. || alast >= zn2[0]) {
	meso6_1.tgn2[0] = meso6_1.tgn1[1];
	meso6_1.tn2[0] = meso6_1.tn1[4];
	meso6_1.tn2[1] = parm6_1.pma[0] * mavg6_1.pavgm[0] / (1. - csw_1.sw[
		19] * glob6s_(parm6_1.pma));
	meso6_1.tn2[2] = parm6_1.pma[100] * mavg6_1.pavgm[1] / (1. - csw_1.sw[
		19] * glob6s_(&parm6_1.pma[100]));
	meso6_1.tn2[3] = parm6_1.pma[200] * mavg6_1.pavgm[2] / (1. - csw_1.sw[
		19] * csw_1.sw[21] * glob6s_(&parm6_1.pma[200]));
/* Computing 2nd power */
	d__1 = parm6_1.pma[200] * mavg6_1.pavgm[2];
	meso6_1.tgn2[1] = mavg6_1.pavgm[8] * parm6_1.pma[900] * (csw_1.sw[19] 
		* csw_1.sw[21] * glob6s_(&parm6_1.pma[900]) + 1.) * 
		meso6_1.tn2[3] * meso6_1.tn2[3] / (d__1 * d__1);
	meso6_1.tn3[0] = meso6_1.tn2[3];
    }
    if (*alt >= zn3[0]) {
	goto L6;
    }

/*       LOWER STRATOSPHERE AND TROPOSPHERE [below ZN3(1)] */
/*         Temperature at nodes and gradients at end nodes */
/*         Inverse temperature a linear function of spherical harmonics */
/* e        Only calculate nodes if input changed */
    if (v1 == 1. || alast >= zn3[0]) {
	meso6_1.tgn3[0] = meso6_1.tgn2[1];
	meso6_1.tn3[1] = parm6_1.pma[300] * mavg6_1.pavgm[3] / (1. - csw_1.sw[
		21] * glob6s_(&parm6_1.pma[300]));
	meso6_1.tn3[2] = parm6_1.pma[400] * mavg6_1.pavgm[4] / (1. - csw_1.sw[
		21] * glob6s_(&parm6_1.pma[400]));
	meso6_1.tn3[3] = parm6_1.pma[500] * mavg6_1.pavgm[5] / (1. - csw_1.sw[
		21] * glob6s_(&parm6_1.pma[500]));
	meso6_1.tn3[4] = parm6_1.pma[600] * mavg6_1.pavgm[6] / (1. - csw_1.sw[
		21] * glob6s_(&parm6_1.pma[600]));
/* Computing 2nd power */
	d__1 = parm6_1.pma[600] * mavg6_1.pavgm[6];
	meso6_1.tgn3[1] = parm6_1.pma[700] * mavg6_1.pavgm[7] * (csw_1.sw[21] 
		* glob6s_(&parm6_1.pma[700]) + 1.) * meso6_1.tn3[4] * 
		meso6_1.tn3[4] / (d__1 * d__1);
    }
L6:
    if (*mass == 0) {
	goto L50;
    }
/* e          Linear transition to full mixing at ZMIX from almost */
/* e            full mixing at ZN2(1) to improve efficiency */
    dmc = 0.;
    if (*alt > zmix) {
	dmc = 1. - (zn2[0] - *alt) / (zn2[0] - zmix);
    }
    dz28 = d6[2];
/*      ***** N2 DENSITY **** */
    dmr = d6[2] / dm28m - 1.;
    d__[3] = densm_(alt, &dm28m, &xmm, &tz, &mn3, zn3, meso6_1.tn3,
                        meso6_1.tgn3, &mn2, zn2, meso6_1.tn2, meso6_1.tgn2);
    d__[3] *= dmr * dmc + 1.;
/*      ***** HE DENSITY **** */
    d__[1] = 0.;
    if (*mass != 4 && *mass != 48) {
	goto L204;
    }
    dmr = d6[0] / (dz28 * lower6_1.pdm[1]) - 1.;
    d__[1] = d__[3] * lower6_1.pdm[1] * (dmr * dmc + 1.);
L204:
/*      **** O DENSITY **** */
    d__[2] = 0.;
/* L216: */
/*      ***** O2 DENSITY **** */
    d__[4] = 0.;
    if (*mass != 32 && *mass != 48) {
	goto L232;
    }
    dmr = d6[3] / (dz28 * lower6_1.pdm[31]) - 1.;
    d__[4] = d__[3] * lower6_1.pdm[31] * (dmr * dmc + 1.);
L232:
/*      ***** AR DENSITY **** */
    d__[5] = 0.;
    if (*mass != 40 && *mass != 48) {
	goto L240;
    }
    dmr = d6[4] / (dz28 * lower6_1.pdm[41]) - 1.;
    d__[5] = d__[3] * lower6_1.pdm[41] * (dmr * dmc + 1.);
L240:
/*      ***** HYDROGEN DENSITY **** */
    d__[7] = 0.;
/*      ***** ATOMIC NITROGEN DENSITY **** */
    d__[8] = 0.;

/*       TOTAL MASS DENSITY */

    if (*mass == 48) {
	d__[6] = (d__[1] * 4. + d__[2] * 16. + d__[3] * 28. + d__[4] * 32. + 
		d__[5] * 40. + d__[7] + d__[8] * 14.) * 1.66e-24;
	if (metsel_1.imr == 1) {
	    d__[6] /= 1e3;
	}
    }
    t[2] = tz;
L10:
    goto L90;
L50:
    gts3c_1.dd = densm_(alt, &c_b14, &(c__0x), &tz, &mn3, zn3, meso6_1.tn3,
	    meso6_1.tgn3, &mn2, zn2, meso6_1.tn2, meso6_1.tgn2);
    t[2] = tz;
L90:
    alast = *alt;
    return 0;
} /* gtd6_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int ghp6_(integer *iyd, doublereal *sec, doublereal *alt, 
	doublereal *glat, doublereal *glong, doublereal *stl, doublereal *
	f107a, doublereal *f107, doublereal *ap, doublereal *d__, doublereal *
	t, doublereal *press)
{
    /* Initialized data */

    static doublereal bm = 1.3806e-19;
    static doublereal rgas = 831.4;
    static doublereal test = 4.3e-4;

    /* Format strings */
    static char fmt_100[] = "(1x,\002GHP6 NOT CONVERGING FOR PRESS\002,1pe12"
	    ".2,e12.2)";

    /* System generated locals */
    doublereal d__1;

    /* Builtin functions */
    double d_lg10(doublereal *);
//    integer s_wsfe(cilist *), do_fio(integer *, char *, ftnlen), e_wsfe(void);

    /* Local variables */
    static doublereal diff;
    static integer iday;
    static doublereal g;
    static integer l;
    static doublereal p, z__, ca, cd, cl, sh, pl, zi, xm, xn, cl2;
    extern /* Subroutine */ int gtd6_(integer *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, integer *, doublereal *, doublereal *)
	    ;

    /* Fortran I/O blocks */
    static cilist io___41 = { 0, 6, 0, fmt_100, 0 };


/*       FIND ALTITUDE OF PRESSURE SURFACE (PRESS) FROM GTD6 */
/*     INPUT: */
/*        IYD - YEAR AND DAY AS YYYYDDD */
/*        SEC - UT(SEC) */
/*        GLAT - GEODETIC LATITUDE(DEG) */
/*        GLONG - GEODETIC LONGITUDE(DEG) */
/*        STL - LOCAL APPARENT SOLAR TIME(HRS) */
/*        F107A - 3 MONTH AVERAGE OF F10.7 FLUX */
/*        F107 - DAILY F10.7 FLUX FOR PREVIOUS DAY */
/*        AP - MAGNETIC INDEX(DAILY) OR WHEN SW(9)=-1. : */
/*           - ARRAY CONTAINING: */
/*             (1) DAILY AP */
/*             (2) 3 HR AP INDEX FOR CURRENT TIME */
/*             (3) 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME */
/*             (4) 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME */
/*             (5) 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME */
/*             (6) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR */
/*                    TO CURRENT TIME */
/*             (7) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR */
/*                    TO CURRENT TIME */
/*        PRESS - PRESSURE LEVEL(MB) */
/*     OUTPUT: */
/*        ALT - ALTITUDE(KM) */
/*        D(1) - HE NUMBER DENSITY(CM-3) */
/*        D(2) - O NUMBER DENSITY(CM-3) */
/*        D(3) - N2 NUMBER DENSITY(CM-3) */
/*        D(4) - O2 NUMBER DENSITY(CM-3) */
/*        D(5) - AR NUMBER DENSITY(CM-3) */
/*        D(6) - TOTAL MASS DENSITY(GM/CM3) */
/*        D(7) - H NUMBER DENSITY(CM-3) */
/*        D(8) - N NUMBER DENSITY(CM-3) */
/*        T(1) - EXOSPHERIC TEMPERATURE */
/*        T(2) - TEMPERATURE AT ALT */

    /* Parameter adjustments */
    --t;
    --d__;
    --ap;

    /* Function Body */
    pl = d_lg10(press);
/*      Initial altitude estimate */
    if (pl >= -5.) {
	if (pl > 2.5) {
	    zi = (3. - pl) * 18.06;
	}
	if (pl > .75 && pl <= 2.5) {
	    zi = (3.08 - pl) * 14.98;
	}
	if (pl > -1. && pl <= .75) {
	    zi = (2.72 - pl) * 17.8;
	}
	if (pl > -2. && pl <= -1.) {
	    zi = (3.64 - pl) * 14.28;
	}
	if (pl > -4. && pl <= -2.) {
	    zi = (4.32 - pl) * 12.72;
	}
	if (pl <= -4.) {
	    zi = (.11 - pl) * 25.3;
	}
	iday = *iyd % 1000;
	cl = *glat / 90.;
	cl2 = cl * cl;
	if (iday < 182) {
	    cd = 1. - iday / 91.25;
	}
	if (iday >= 182) {
	    cd = iday / 91.25 - 3.;
	}
	ca = 0.;
	if (pl > -1.11 && pl <= -.23) {
	    ca = 1.;
	}
	if (pl > -.23) {
	    ca = (2.79 - pl) / 3.02;
	}
	if (pl <= -1.11 && pl > -3.) {
	    ca = (-2.93 - pl) / -1.8200000000000001;
	}
	z__ = zi - cl * 4.87 * cd * ca - cl2 * 1.64 * ca + ca * .31 * cl;
    }
    if (pl < -5.) {
/* Computing 2nd power */
	d__1 = pl + 4.;
	z__ = d__1 * d__1 * 22. + 110;
    }
    l = 0;
/*      ITERATION LOOP */
L10:
    ++l;
    gtd6_(iyd, sec, &z__, glat, glong, stl, f107a, f107, &ap[1], &c__48, &d__[
	    1], &t[1]);
    xn = d__[1] + d__[2] + d__[3] + d__[4] + d__[5] + d__[7] + d__[8];
    p = bm * xn * t[2];
    if (metsel_1.imr == 1) {
	p *= 1e-6;
    }
    diff = pl - d_lg10(&p);
    if (abs(diff) < test || l == 6) {
	goto L20;
    }
    xm = d__[6] / xn / 1.66e-24;
/* Computing 2nd power */
    d__1 = z__ / parmb_1.re + 1.;
    g = parmb_1.gsurf / (d__1 * d__1);
    sh = rgas * t[2] / (xm * g);
/*         New altitude estimate using scale height */
    z__ -= sh * diff * 2.302;
    goto L10;
L20:
    if (l == 6) {
	s_wsfe(&io___41);
	do_fio(&c__1, (char *)&(*press), (ftnlen)sizeof(doublereal));
	do_fio(&c__1, (char *)&diff, (ftnlen)sizeof(doublereal));
	e_wsfe();
    }
    *alt = z__;
    return 0;
} /* ghp6_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int glatf_(doublereal *lat, doublereal *gv, doublereal *reff)
{
    /* Initialized data */

    static doublereal dgtr = .0174533;
    static doublereal latl = -999.;

    /* Builtin functions */
    double cos(doublereal);

    /* Local variables */
    static doublereal c2;

/*      CALCULATE LATITUDE VARIABLE GRAVITY (GV) AND EFFECTIVE */
/*      RADIUS (REFF) */
    if (*lat != latl) {
	c2 = cos(2. * dgtr * *lat);
    }
    latl = *lat;
    *gv = (1. - c2 * .0026373) * 980.616;
    *reff = *gv * 2. / (c2 * 2.27e-9 + 3.085462e-6) * 1e-5;
    return 0;
} /* glatf_ */

/* ---------------------------------------------------------------- */
doublereal vtst_(integer *iyd, doublereal *sec, doublereal *glat, doublereal *
	glong, doublereal *stl, doublereal *f107a, doublereal *f107, 
	doublereal *ap, integer *ic)
{
    /* Initialized data */

    static integer iydl[2] = { -999,-999 };
    static doublereal secl[2] = { -999.,-999. };
    static doublereal glatl[2] = { -999.,-999. };
    static doublereal gll[2] = { -999.,-999. };
    static doublereal stll[2] = { -999.,-999. };
    static doublereal fal[2] = { -999.,-999. };
    static doublereal fl[2] = { -999.,-999. };
    static doublereal apl[14]	/* was [7][2] */ = { -999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999. };
    static doublereal swl[50]	/* was [25][2] */ = { -999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999. };
    static doublereal swcl[50]	/* was [25][2] */ = { -999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,-999.,
	    -999.,-999. };

    /* System generated locals */
    doublereal ret_val;

    /* Local variables */
    static integer i__;

/*       Test if geophysical variables or switches changed and save */
/*       Return 0 if unchanged and 1 if changed */
    /* Parameter adjustments */
    --ap;

    /* Function Body */
    ret_val = 0.;
    if (*iyd != iydl[*ic - 1]) {
	goto L10;
    }
    if (*sec != secl[*ic - 1]) {
	goto L10;
    }
    if (*glat != glatl[*ic - 1]) {
	goto L10;
    }
    if (*glong != gll[*ic - 1]) {
	goto L10;
    }
    if (*stl != stll[*ic - 1]) {
	goto L10;
    }
    if (*f107a != fal[*ic - 1]) {
	goto L10;
    }
    if (*f107 != fl[*ic - 1]) {
	goto L10;
    }
    for (i__ = 1; i__ <= 7; ++i__) {
	if (ap[i__] != apl[i__ + *ic * 7 - 8]) {
	    goto L10;
	}
/* L5: */
    }
    for (i__ = 1; i__ <= 25; ++i__) {
	if (csw_1.sw[i__ - 1] != swl[i__ + *ic * 25 - 26]) {
	    goto L10;
	}
	if (csw_1.swc[i__ - 1] != swcl[i__ + *ic * 25 - 26]) {
	    goto L10;
	}
/* L7: */
    }
    goto L20;
L10:
    ret_val = 1.;
    iydl[*ic - 1] = *iyd;
    secl[*ic - 1] = *sec;
    glatl[*ic - 1] = *glat;
    gll[*ic - 1] = *glong;
    stll[*ic - 1] = *stl;
    fal[*ic - 1] = *f107a;
    fl[*ic - 1] = *f107;
    for (i__ = 1; i__ <= 7; ++i__) {
	apl[i__ + *ic * 7 - 8] = ap[i__];
/* L15: */
    }
    for (i__ = 1; i__ <= 25; ++i__) {
	swl[i__ + *ic * 25 - 26] = csw_1.sw[i__ - 1];
	swcl[i__ + *ic * 25 - 26] = csw_1.swc[i__ - 1];
/* L16: */
    }
L20:
    return ret_val;
} /* vtst_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int gts6_0_(int n__, integer *iyd, doublereal *sec, 
	doublereal *alt, doublereal *glat, doublereal *glong, doublereal *stl,
	 doublereal *f107a, doublereal *f107, doublereal *ap, integer *mass, 
	doublereal *d__, doublereal *t, logical *meter)
{
    /* Initialized data */

    static integer mt[10] = { 48,0,4,16,28,32,40,1,49,14 };
    static doublereal altl[8] = { 200.,400.,160.,200.,240.,450.,320.,450. };
    static integer mn1 = 5;
    static doublereal zn1[5] = { 120.,110.,100.,90.,72.5 };
    static doublereal dgtr = .0174533;
    static doublereal dr = .0172142;
    static doublereal alast = -999.;

    /* Format strings */
    static char fmt_100[] = "(1x,\002MASS\002,i5,\002  NOT VALID\002)";

    /* System generated locals */
    doublereal d__1;

    /* Builtin functions */
//    double d_mod(doublereal *, doublereal *), sin(doublereal), cos(doublereal);
//    integer s_wsfe(cilist *), do_fio(integer *, char *, ftnlen), e_wsfe(void);
    double exp(doublereal), log(doublereal);

    /* Local variables */
    static doublereal hcc14, hcc16, zcc01, zcc14;
    extern doublereal ccor_(doublereal *, doublereal *, doublereal *, 
	    doublereal *);
    static doublereal zcc16, ddum;
    extern doublereal dnet_(doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *);
    static doublereal zhm01, tinf, zhm04, zhm32, zhm16, zhm40, zhm14, zhm28;
    extern doublereal vtst_(integer *, doublereal *, doublereal *, doublereal 
	    *, doublereal *, doublereal *, doublereal *, doublereal *, 
	    integer *);
    static integer i__, j;
    extern doublereal densu_(doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, integer *, doublereal *, doublereal *,
	     doublereal *);
    static doublereal g1, g4, v2;
    extern doublereal globe6_(doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *, doublereal *, doublereal *, 
	    doublereal *, doublereal *), glob6s_(doublereal *);
    static doublereal b01, b04, b32, b16, g40, b28, g32, g16, b40, g14, g28, 
	    b14, tz, hc04, hc32, hc16, rc16, day, zc04, zh04, zlb, zhf, yrd, 
	    xmm, zh28, xmd, zh16, zc16, zh32, zc32, zh40, hc40, zc40, zh01, 
	    hc01, zc01, rc01, zh14, hc14, zc14, rc14, hcc01;

    /* Fortran I/O blocks */
    static cilist io___72 = { 0, 6, 0, fmt_100, 0 };


/*        Neutral Thermosphere Model above 72.5 km for MSISE-90 */
/*         A.E.Hedin 3/9/90 */
/*         Coefficients not changed for 120km and above, but results may differ */
/*        by a few percent from MSIS-86 (GTS5) with introduction of a */
/*        latitude dependent accel. of gravity. */
/*         Lower thermosphere reformulated for better continuation into */
/*        lower atmosphere. */
/*        For efficiency: */
/*         Exospheric temperature left at average value for alt below 120km; */
/*         120 km gradient left at average value for alt below 72 km; */
/*     INPUT: */
/*        IYD - YEAR AND DAY AS YYYYDDD */
/*        SEC - UT(SEC) */
/*        ALT - ALTITUDE(KM) (GREATER THAN 72.5 KM) */
/*        GLAT - GEODETIC LATITUDE(DEG) */
/*        GLONG - GEODETIC LONGITUDE(DEG) */
/*        STL - LOCAL APPARENT SOLAR TIME(HRS) */
/*        F107A - 3 MONTH AVERAGE OF F10.7 FLUX */
/*        F107 - DAILY F10.7 FLUX FOR PREVIOUS DAY */
/*        AP - MAGNETIC INDEX(DAILY) OR WHEN SW(9)=-1. : */
/*           - ARRAY CONTAINING: */
/*             (1) DAILY AP */
/*             (2) 3 HR AP INDEX FOR CURRENT TIME */
/*             (3) 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME */
/*             (4) 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME */
/*             (5) 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME */
/*             (6) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR */
/*                    TO CURRENT TIME */
/*             (7) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR */
/*                    TO CURRENT TIME */
/*        MASS - MASS NUMBER (ONLY DENSITY FOR SELECTED GAS IS */
/*                 CALCULATED.  MASS 0 IS TEMPERATURE.  MASS 48 FOR ALL. */
/*     Note:  Ut, Local Time, and Longitude are used independently in the */
/*            model and are not of equal importance for every situation. */
/*            For the most physically realistic calculation these three */
/*            variables should be consistent (STL=SEC/3600+GLONG/15). */
/*     OUTPUT: */
/*        D(1) - HE NUMBER DENSITY(CM-3) */
/*        D(2) - O NUMBER DENSITY(CM-3) */
/*        D(3) - N2 NUMBER DENSITY(CM-3) */
/*        D(4) - O2 NUMBER DENSITY(CM-3) */
/*        D(5) - AR NUMBER DENSITY(CM-3) */
/*        D(6) - TOTAL MASS DENSITY(GM/CM3) */
/*        D(7) - H NUMBER DENSITY(CM-3) */
/*        D(8) - N NUMBER DENSITY(CM-3) */
/*        T(1) - EXOSPHERIC TEMPERATURE */
/*        T(2) - TEMPERATURE AT ALT */

/*           The following is for test and special purposes: */
/*           (1) LOWER BOUND QUANTITIES IN COMMON/GTS3C/ */
/*           (2) TO TURN ON AND OFF PARTICULAR VARIATIONS CALL TSELEC(SW) */
/*               WHERE SW IS A 25 ELEMENT ARRAY CONTAINING 0. FOR OFF, 1. */
/*               FOR ON, OR 2. FOR MAIN EFFECTS OFF BUT CROSS TERMS ON */
/*               FOR THE FOLLOWING VARIATIONS */
/*               1 - F10.7 EFFECT ON MEAN  2 - TIME INDEPENDENT */
/*               3 - SYMMETRICAL ANNUAL    4 - SYMMETRICAL SEMIANNUAL */
/*               5 - ASYMMETRICAL ANNUAL   6 - ASYMMETRICAL SEMIANNUAL */
/*               7 - DIURNAL               8 - SEMIDIURNAL */
/*               9 - DAILY AP             10 - ALL UT/LONG EFFECTS */
/*              11 - LONGITUDINAL         12 - UT AND MIXED UT/LONG */
/*              13 - MIXED AP/UT/LONG     14 - TERDIURNAL */
/*              15 - DEPARTURES FROM DIFFUSIVE EQUILIBRIUM */
/*              16 - ALL TINF VAR         17 - ALL TLB VAR */
/*              18 - ALL TN1 VAR           19 - ALL S VAR */
/*              20 - ALL TN2 VAR           21 - ALL NLB VAR */
/*              22 - ALL TN3 VAR           23 - TURBO SCALE HEIGHT VAR */

/*              To get current values of SW: CALL TRETRV(SW) */

    /* Parameter adjustments */
    if (ap) {
	--ap;
	}
    if (d__) {
	--d__;
	}
    if (t) {
	--t;
	}

    /* Function Body */
    switch(n__) {
	case 1: goto L_meter6;
	}

/* e        Test for changed input */
    v2 = vtst_(iyd, sec, glat, glong, stl, f107a, f107, &ap[1], &c__2);

    yrd = (doublereal) (*iyd);
    gts3c_1.za = parm6_1.pdl[40];
    zn1[0] = gts3c_1.za;
    for (j = 1; j <= 8; ++j) {
	d__[j] = 0.;
/* L2: */
    }
/* e       TINF VARIATIONS NOT IMPORTANT BELOW ZA OR ZN1(1) */
    if (*alt > zn1[0]) {
	if (v2 == 1. || alast <= zn1[0]) {
	    tinf = lower6_1.ptm[0] * parm6_1.pt[0] * (csw_1.sw[15] * globe6_(&
		    yrd, sec, glat, glong, stl, f107a, f107, &ap[1], 
		    parm6_1.pt) + 1.);
	}
    } else {
	tinf = lower6_1.ptm[0] * parm6_1.pt[0];
    }
    t[1] = tinf;
/* e         GRADIENT VARIATIONS NOT IMPORTANT BELOW ZN1(5) */
    if (*alt > zn1[4]) {
	if (v2 == 1. || alast <= zn1[4]) {
	    gts3c_1.g0 = lower6_1.ptm[3] * parm6_1.ps[0] * (csw_1.sw[18] * 
		    globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &ap[1], 
		    parm6_1.ps) + 1.);
	}
    } else {
	gts3c_1.g0 = lower6_1.ptm[3] * parm6_1.ps[0];
    }
/* e      Calculate these temperatures only if input changed */
    if (v2 == 1.) {
	gts3c_1.tlb = lower6_1.ptm[1] * (csw_1.sw[16] * globe6_(&yrd, sec, 
		glat, glong, stl, f107a, f107, &ap[1], &parm6_1.pd[450]) + 1.)
		 * parm6_1.pd[450];
    }
    gts3c_1.s = gts3c_1.g0 / (tinf - gts3c_1.tlb);
/* e       Lower thermosphere temp variations not significant for */
/* e        density above 300 km */
    if (*alt < 300.) {
	if (v2 == 1. || alast >= 300.) {
	    meso6_1.tn1[1] = lower6_1.ptm[6] * parm6_1.ptl[0] / (1. - 
		    csw_1.sw[17] * glob6s_(parm6_1.ptl));
	    meso6_1.tn1[2] = lower6_1.ptm[2] * parm6_1.ptl[100] / (1. - 
		    csw_1.sw[17] * glob6s_(&parm6_1.ptl[100]));
	    meso6_1.tn1[3] = lower6_1.ptm[7] * parm6_1.ptl[200] / (1. - 
		    csw_1.sw[17] * glob6s_(&parm6_1.ptl[200]));
	    meso6_1.tn1[4] = lower6_1.ptm[4] * parm6_1.ptl[300] / (1. - 
		    csw_1.sw[17] * csw_1.sw[19] * glob6s_(&parm6_1.ptl[300]));
/* Computing 2nd power */
	    d__1 = lower6_1.ptm[4] * parm6_1.ptl[300];
	    meso6_1.tgn1[1] = lower6_1.ptm[8] * parm6_1.pma[800] * (csw_1.sw[
		    17] * csw_1.sw[19] * glob6s_(&parm6_1.pma[800]) + 1.) * 
		    meso6_1.tn1[4] * meso6_1.tn1[4] / (d__1 * d__1);
	}
    } else {
	meso6_1.tn1[1] = lower6_1.ptm[6] * parm6_1.ptl[0];
	meso6_1.tn1[2] = lower6_1.ptm[2] * parm6_1.ptl[100];
	meso6_1.tn1[3] = lower6_1.ptm[7] * parm6_1.ptl[200];
	meso6_1.tn1[4] = lower6_1.ptm[4] * parm6_1.ptl[300];
/* Computing 2nd power */
	d__1 = lower6_1.ptm[4] * parm6_1.ptl[300];
	meso6_1.tgn1[1] = lower6_1.ptm[8] * parm6_1.pma[800] * meso6_1.tn1[4] 
		* meso6_1.tn1[4] / (d__1 * d__1);
    }

    gts3c_1.z0 = zn1[3];
    gts3c_1.t0 = meso6_1.tn1[3];
    zlb = lower6_1.ptm[5];
    gts3c_1.tr12 = 1.;

    if (*mass == 0) {
	goto L50;
    }
/*       N2 variation factor at Zlb */
    g28 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &
	    ap[1], &parm6_1.pd[300]);
/*        Variation of turbopause height */
    day = d_mod(&yrd, &c_b36);
    zhf = parm6_1.pdl[49] * (csw_1.sw[4] * parm6_1.pdl[24] * sin(dgtr * *glat)
	     * cos(dr * (day - parm6_1.pt[13])) + 1.);

    yrd = (doublereal) (*iyd);
    t[1] = tinf;
    xmm = lower6_1.pdm[24];

    for (j = 1; j <= 10; ++j) {
	if (*mass == mt[j - 1]) {
	    goto L15;
	}
/* L10: */
    }
    s_wsfe(&io___72);
    do_fio(&c__1, (char *)&(*mass), (ftnlen)sizeof(integer));
    e_wsfe();
    goto L90;
L15:
    if (*alt > altl[5] && *mass != 28 && *mass != 48) {
	goto L17;
    }

/*       **** N2 DENSITY **** */

/*      Diffusive density at Zlb */
    gts3c_1.db28 = lower6_1.pdm[20] * exp(g28) * parm6_1.pd[300];
/*      Diffusive density at Alt */
    d__[3] = densu_(alt, &gts3c_1.db28, &tinf, &gts3c_1.tlb, &c_b44, &c_b45, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[3];
/*      Turbopause */
    zh28 = lower6_1.pdm[22] * zhf;
    zhm28 = lower6_1.pdm[23] * parm6_1.pdl[30];
    xmd = 28. - xmm;
/*      Mixed density at Zlb */
    b28 = densu_(&zh28, &gts3c_1.db28, &tinf, &gts3c_1.tlb, &xmd, &c_b46, &tz,
	     &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    if (*alt > altl[2] || csw_1.sw[14] == 0.) {
	goto L17;
    }
/*      Mixed density at Alt */
    dmix_1.dm28 = densu_(alt, &b28, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &tz, &
	    zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[3] = dnet_(&d__[3], &dmix_1.dm28, &zhm28, &xmm, &c_b44);
L17:
    switch (j) {
	case 1:  goto L20;
	case 2:  goto L50;
	case 3:  goto L20;
	case 4:  goto L25;
	case 5:  goto L90;
	case 6:  goto L35;
	case 7:  goto L40;
	case 8:  goto L45;
	case 9:  goto L25;
	case 10:  goto L48;
    }
L20:

/*       **** HE DENSITY **** */

/*       Density variation factor at Zlb */
    g4 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &ap[
	    1], parm6_1.pd);
/*      Diffusive density at Zlb */
    gts3c_1.db04 = lower6_1.pdm[0] * exp(g4) * parm6_1.pd[0];
/*      Diffusive density at Alt */
    d__[1] = densu_(alt, &gts3c_1.db04, &tinf, &gts3c_1.tlb, &c_b55, &c_b56, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[1];
    if (*alt > altl[0] || csw_1.sw[14] == 0.) {
	goto L24;
    }
/*      Turbopause */
    zh04 = lower6_1.pdm[2];
    zhm04 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 4. - xmm;
    b04 = densu_(&zh04, &gts3c_1.db04, &tinf, &gts3c_1.tlb, &d__1, &c_b58, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm04 = densu_(alt, &b04, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[1] = dnet_(&d__[1], &dmix_1.dm04, &zhm04, &xmm, &c_b55);
/*      Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[1] / b04);
    zc04 = lower6_1.pdm[4] * parm6_1.pdl[25];
    hc04 = lower6_1.pdm[5] * parm6_1.pdl[26];
/*      Net density corrected at Alt */
    d__[1] *= ccor_(alt, &gts3c_1.rl, &hc04, &zc04);
L24:
    if (*mass != 48) {
	goto L90;
    }
L25:

/*      **** O DENSITY **** */

/*       Density variation factor at Zlb */
    g16 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &
	    ap[1], &parm6_1.pd[150]);
/*      Diffusive density at Zlb */
    gts3c_1.db16 = lower6_1.pdm[10] * exp(g16) * parm6_1.pd[150];
/*       Diffusive density at Alt */
    d__[2] = densu_(alt, &gts3c_1.db16, &tinf, &gts3c_1.tlb, &c_b61, &c_b45, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[2];
    if (*alt > altl[1] || csw_1.sw[14] == 0.) {
	goto L34;
    }
/*  Corrected from PDM(3,1) to PDM(3,2)  12/2/85 */
/*       Turbopause */
    zh16 = lower6_1.pdm[12];
    zhm16 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 16 - xmm;
    b16 = densu_(&zh16, &gts3c_1.db16, &tinf, &gts3c_1.tlb, &d__1, &c_b46, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm16 = densu_(alt, &b16, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[2] = dnet_(&d__[2], &dmix_1.dm16, &zhm16, &xmm, &c_b61);
/*       Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[11] * abs(parm6_1.pdl[41]) / b16);
    hc16 = lower6_1.pdm[15] * parm6_1.pdl[28];
    zc16 = lower6_1.pdm[14] * parm6_1.pdl[27];
    d__[2] *= ccor_(alt, &gts3c_1.rl, &hc16, &zc16);
/*       Chemistry correction */
    hcc16 = lower6_1.pdm[17] * parm6_1.pdl[38];
    zcc16 = lower6_1.pdm[16] * parm6_1.pdl[37];
    rc16 = lower6_1.pdm[13] * parm6_1.pdl[39];
/*      Net density corrected at Alt */
    d__[2] *= ccor_(alt, &rc16, &hcc16, &zcc16);
L34:
    if (*mass != 48 && *mass != 49) {
	goto L90;
    }
L35:

/*       **** O2 DENSITY **** */

/*       Density variation factor at Zlb */
    g32 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &
	    ap[1], &parm6_1.pd[600]);
/*      Diffusive density at Zlb */
    gts3c_1.db32 = lower6_1.pdm[30] * exp(g32) * parm6_1.pd[600];
/*       Diffusive density at Alt */
    d__[4] = densu_(alt, &gts3c_1.db32, &tinf, &gts3c_1.tlb, &c_b67, &c_b45, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    if (*mass == 49) {
	gts3c_1.dd += d__[4] * 2.;
    } else {
	gts3c_1.dd = d__[4];
    }
    if (*alt > altl[3] || csw_1.sw[14] == 0.) {
	goto L39;
    }
/*       Turbopause */
    zh32 = lower6_1.pdm[32];
    zhm32 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 32. - xmm;
    b32 = densu_(&zh32, &gts3c_1.db32, &tinf, &gts3c_1.tlb, &d__1, &c_b46, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm32 = densu_(alt, &b32, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[4] = dnet_(&d__[4], &dmix_1.dm32, &zhm32, &xmm, &c_b67);
/*       Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[31] / b32);
    hc32 = lower6_1.pdm[35] * parm6_1.pdl[32];
    zc32 = lower6_1.pdm[34] * parm6_1.pdl[31];
/*      Net density corrected at Alt */
    d__[4] *= ccor_(alt, &gts3c_1.rl, &hc32, &zc32);
L39:
    if (*mass != 48) {
	goto L90;
    }
L40:

/*       **** AR DENSITY **** */

/*       Density variation factor at Zlb */
    g40 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &
	    ap[1], &parm6_1.pd[750]);
/*      Diffusive density at Zlb */
    gts3c_1.db40 = lower6_1.pdm[40] * exp(g40) * parm6_1.pd[750];
/*       Diffusive density at Alt */
    d__[5] = densu_(alt, &gts3c_1.db40, &tinf, &gts3c_1.tlb, &c_b73, &c_b45, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[5];
    if (*alt > altl[4] || csw_1.sw[14] == 0.) {
	goto L44;
    }
/*       Turbopause */
    zh40 = lower6_1.pdm[42];
    zhm40 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 40. - xmm;
    b40 = densu_(&zh40, &gts3c_1.db40, &tinf, &gts3c_1.tlb, &d__1, &c_b46, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm40 = densu_(alt, &b40, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[5] = dnet_(&d__[5], &dmix_1.dm40, &zhm40, &xmm, &c_b73);
/*       Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[41] / b40);
    hc40 = lower6_1.pdm[45] * parm6_1.pdl[34];
    zc40 = lower6_1.pdm[44] * parm6_1.pdl[33];
/*      Net density corrected at Alt */
    d__[5] *= ccor_(alt, &gts3c_1.rl, &hc40, &zc40);
L44:
    if (*mass != 48) {
	goto L90;
    }
L45:

/*        **** HYDROGEN DENSITY **** */

/*       Density variation factor at Zlb */
    g1 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &ap[
	    1], &parm6_1.pd[900]);
/*      Diffusive density at Zlb */
    gts3c_1.db01 = lower6_1.pdm[50] * exp(g1) * parm6_1.pd[900];
/*       Diffusive density at Alt */
    d__[7] = densu_(alt, &gts3c_1.db01, &tinf, &gts3c_1.tlb, &c_b14, &c_b56, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[7];
    if (*alt > altl[6] || csw_1.sw[14] == 0.) {
	goto L47;
    }
/*       Turbopause */
    zh01 = lower6_1.pdm[52];
    zhm01 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 1. - xmm;
    b01 = densu_(&zh01, &gts3c_1.db01, &tinf, &gts3c_1.tlb, &d__1, &c_b58, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm01 = densu_(alt, &b01, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[7] = dnet_(&d__[7], &dmix_1.dm01, &zhm01, &xmm, &c_b14);
/*       Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[51] * abs(parm6_1.pdl[42]) / b01);
    hc01 = lower6_1.pdm[55] * parm6_1.pdl[36];
    zc01 = lower6_1.pdm[54] * parm6_1.pdl[35];
    d__[7] *= ccor_(alt, &gts3c_1.rl, &hc01, &zc01);
/*       Chemistry correction */
    hcc01 = lower6_1.pdm[57] * parm6_1.pdl[44];
    zcc01 = lower6_1.pdm[56] * parm6_1.pdl[43];
    rc01 = lower6_1.pdm[53] * parm6_1.pdl[45];
/*      Net density corrected at Alt */
    d__[7] *= ccor_(alt, &rc01, &hcc01, &zcc01);
L47:
L48:

/*        **** ATOMIC NITROGEN DENSITY **** */

/*       Density variation factor at Zlb */
    g14 = csw_1.sw[20] * globe6_(&yrd, sec, glat, glong, stl, f107a, f107, &
	    ap[1], &parm6_1.pd[1050]);
/*      Diffusive density at Zlb */
    gts3c_1.db14 = lower6_1.pdm[60] * exp(g14) * parm6_1.pd[1050];
/*       Diffusive density at Alt */
    d__[8] = densu_(alt, &gts3c_1.db14, &tinf, &gts3c_1.tlb, &c_b85, &c_b45, &
	    t[2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    gts3c_1.dd = d__[8];
    if (*alt > altl[7] || csw_1.sw[14] == 0.) {
	goto L49;
    }
/*       Turbopause */
    zh14 = lower6_1.pdm[62];
    zhm14 = zhm28;
/*      Mixed density at Zlb */
    d__1 = 14. - xmm;
    b14 = densu_(&zh14, &gts3c_1.db14, &tinf, &gts3c_1.tlb, &d__1, &c_b46, &t[
	    2], &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Mixed density at Alt */
    dmix_1.dm14 = densu_(alt, &b14, &tinf, &gts3c_1.tlb, &xmm, &c_b45, &t[2], 
	    &zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
/*      Net density at Alt */
    d__[8] = dnet_(&d__[8], &dmix_1.dm14, &zhm14, &xmm, &c_b85);
/*       Correction to specified mixing ratio at ground */
    gts3c_1.rl = log(b28 * lower6_1.pdm[61] * abs(parm6_1.pdl[2]) / b14);
    hc14 = lower6_1.pdm[65] * parm6_1.pdl[1];
    zc14 = lower6_1.pdm[64] * parm6_1.pdl[0];
    d__[8] *= ccor_(alt, &gts3c_1.rl, &hc14, &zc14);
/*       Chemistry correction */
    hcc14 = lower6_1.pdm[67] * parm6_1.pdl[4];
    zcc14 = lower6_1.pdm[66] * parm6_1.pdl[3];
    rc14 = lower6_1.pdm[63] * parm6_1.pdl[5];
/*      Net density corrected at Alt */
    d__[8] *= ccor_(alt, &rc14, &hcc14, &zcc14);
L49:
    if (*mass != 48) {
	goto L90;
    }

/*       TOTAL MASS DENSITY */

    d__[6] = (d__[1] * 4. + d__[2] * 16. + d__[3] * 28. + d__[4] * 32. + d__[
	    5] * 40. + d__[7] + d__[8] * 14.) * 1.66e-24;
    gts3c_1.db48 = (gts3c_1.db04 * 4. + gts3c_1.db16 * 16. + gts3c_1.db28 * 
	    28. + gts3c_1.db32 * 32. + gts3c_1.db40 * 40. + gts3c_1.db01 + 
	    gts3c_1.db14 * 14.) * 1.66e-24;
    goto L90;
/*       TEMPERATURE AT ALTITUDE */
L50:
    ddum = densu_(alt, &c_b14, &tinf, &gts3c_1.tlb, &c_b45, &c_b45, &t[2], &
	    zlb, &gts3c_1.s, &mn1, zn1, meso6_1.tn1, meso6_1.tgn1);
    goto L90;
L90:
/*       ADJUST DENSITIES FROM CGS TO KGM */
    if (metsel_1.imr == 1) {
	for (i__ = 1; i__ <= 8; ++i__) {
	    d__[i__] *= 1e6;
/* L95: */
	}
	d__[6] /= 1e3;
    }
    alast = *alt;
    return 0;

L_meter6:
    metsel_1.imr = 0;
    if (*meter) {
	metsel_1.imr = 1;
    }
    return 0;
} /* gts6_ */

/* Subroutine */ int gts6_(integer *iyd, doublereal *sec, doublereal *alt, 
	doublereal *glat, doublereal *glong, doublereal *stl, doublereal *
	f107a, doublereal *f107, doublereal *ap, integer *mass, doublereal *
	d__, doublereal *t)
{
    return gts6_0_(0, iyd, sec, alt, glat, glong, stl, f107a, f107, ap, mass, 
	    d__, t, (logical *)0);
    }

/* Subroutine */ int meter6_(logical *meter)
{
    return gts6_0_(1, (integer *)0, (doublereal *)0, (doublereal *)0, (
	    doublereal *)0, (doublereal *)0, (doublereal *)0, (doublereal *)0,
	     (doublereal *)0, (doublereal *)0, (integer *)0, (doublereal *)0, 
	    (doublereal *)0, meter);
    }

/* ---------------------------------------------------------------- */
doublereal globe6_(doublereal *yrd, doublereal *sec, doublereal *lat, 
	doublereal *long__, doublereal *tloc, doublereal *f107a, doublereal *
	f107, doublereal *ap, doublereal *p)
{
    /* Initialized data */

    static doublereal dgtr = .0174533;
    static doublereal dr = .0172142;
    static doublereal xl = 1e3;
    static doublereal tll = 1e3;
    static doublereal sw9 = 1.;
    static doublereal dayl = -1.;
    static doublereal p14 = -1e3;
    static doublereal p18 = -1e3;
    static doublereal p32 = -1e3;
    static doublereal hr = .2618;
    static doublereal sr = 7.2722e-5;
    static doublereal sv[25] = { 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,
	    1.,1.,1.,1.,1.,1.,1.,1.,1.,1. };
    static integer nsw = 14;
    static doublereal p39 = -1e3;
    static doublereal longl = -999.;

    /* System generated locals */
    integer i__1;
    doublereal ret_val, d__1, d__2, d__3, d__4, d__5, d__6;

    /* Builtin functions */
//    double sin(doublereal), cos(doublereal), exp(doublereal), pow_dd(doublereal *, doublereal *);

    /* Local variables */
    static doublereal c__;
    static integer i__, j;
    static doublereal s, c2, c4, f1, f2, s2, p44, p45, t71, t72, t81, t82;
    extern /* Subroutine */ int tselec_(doublereal *);
    static doublereal cd14, cd32, cd18, cd39, exp1, exp2;

/*       CALCULATE G(L) FUNCTION */
/*       Upper Thermosphere Parameters */
    /* Parameter adjustments */
    --p;
    --ap;

    /* Function Body */
/*       3hr Magnetica activity functions */

    if (csw_1.isw != 64999) {
	tselec_(sv);
    }
    for (j = 1; j <= 14; ++j) {
	ttest_2.t[j - 1] = 0.;
/* L10: */
    }
    if (csw_1.sw[8] > 0.) {
	sw9 = 1.;
    }
    if (csw_1.sw[8] < 0.) {
	sw9 = -1.;
    }
    lpoly_1.iyr = (integer) (*yrd / 1e3);
    lpoly_1.day = *yrd - lpoly_1.iyr * 1e3;
    lpoly_1.xlong = *long__;
    if (xl == *lat) {
	goto L15;
    }
/*          CALCULATE LEGENDRE POLYNOMIALS */
    c__ = sin(*lat * dgtr);
    s = cos(*lat * dgtr);
    c2 = c__ * c__;
    c4 = c2 * c2;
    s2 = s * s;
    lpoly_1.plg[1] = c__;
    lpoly_1.plg[2] = (c2 * 3. - 1.) * .5;
    lpoly_1.plg[3] = (c__ * 5. * c2 - c__ * 3.) * .5;
    lpoly_1.plg[4] = (c4 * 35. - c2 * 30. + 3.) / 8.;
    lpoly_1.plg[5] = (c2 * 63. * c2 * c__ - c2 * 70. * c__ + c__ * 15.) / 8.;
    lpoly_1.plg[6] = (c__ * 11. * lpoly_1.plg[5] - lpoly_1.plg[4] * 5.) / 6.;
/*     PLG(8,1) = (13.*C*PLG(7,1) - 6.*PLG(6,1))/7. */
    lpoly_1.plg[10] = s;
    lpoly_1.plg[11] = c__ * 3. * s;
    lpoly_1.plg[12] = (c2 * 5. - 1.) * 1.5 * s;
    lpoly_1.plg[13] = (c2 * 7. * c__ - c__ * 3.) * 2.5 * s;
    lpoly_1.plg[14] = (c4 * 21. - c2 * 14. + 1.) * 1.875 * s;
    lpoly_1.plg[15] = (c__ * 11. * lpoly_1.plg[14] - lpoly_1.plg[13] * 6.) / 
	    5.;
/*     PLG(8,2) = (13.*C*PLG(7,2)-7.*PLG(6,2))/6. */
/*     PLG(9,2) = (15.*C*PLG(8,2)-8.*PLG(7,2))/7. */
    lpoly_1.plg[20] = s2 * 3.;
    lpoly_1.plg[21] = s2 * 15. * c__;
    lpoly_1.plg[22] = (c2 * 7. - 1.) * 7.5 * s2;
    lpoly_1.plg[23] = c__ * 3. * lpoly_1.plg[22] - lpoly_1.plg[21] * 2.;
    lpoly_1.plg[24] = (c__ * 11. * lpoly_1.plg[23] - lpoly_1.plg[22] * 7.) / 
	    4.;
    lpoly_1.plg[25] = (c__ * 13. * lpoly_1.plg[24] - lpoly_1.plg[23] * 8.) / 
	    5.;
    lpoly_1.plg[30] = s2 * 15. * s;
    lpoly_1.plg[31] = s2 * 105. * s * c__;
    lpoly_1.plg[32] = (c__ * 9. * lpoly_1.plg[31] - lpoly_1.plg[30] * 7.) / 
	    2.;
    lpoly_1.plg[33] = (c__ * 11. * lpoly_1.plg[32] - lpoly_1.plg[31] * 8.) / 
	    3.;
    xl = *lat;
L15:
    if (tll == *tloc) {
	goto L16;
    }
    if (csw_1.sw[6] == 0. && csw_1.sw[7] == 0. && csw_1.sw[13] == 0.) {
	goto L16;
    }
    lpoly_1.stloc = sin(hr * *tloc);
    lpoly_1.ctloc = cos(hr * *tloc);
    lpoly_1.s2tloc = sin(hr * 2. * *tloc);
    lpoly_1.c2tloc = cos(hr * 2. * *tloc);
    lpoly_1.s3tloc = sin(hr * 3. * *tloc);
    lpoly_1.c3tloc = cos(hr * 3. * *tloc);
    tll = *tloc;
L16:
    if (*long__ != longl) {
	lpoly_1.clong = cos(dgtr * *long__);
	lpoly_1.slong = sin(dgtr * *long__);
    }
    longl = *long__;
    if (lpoly_1.day != dayl || p[14] != p14) {
	cd14 = cos(dr * (lpoly_1.day - p[14]));
    }
    if (lpoly_1.day != dayl || p[18] != p18) {
	cd18 = cos(dr * 2. * (lpoly_1.day - p[18]));
    }
    if (lpoly_1.day != dayl || p[32] != p32) {
	cd32 = cos(dr * (lpoly_1.day - p[32]));
    }
    if (lpoly_1.day != dayl || p[39] != p39) {
	cd39 = cos(dr * 2. * (lpoly_1.day - p[39]));
    }
    dayl = lpoly_1.day;
    p14 = p[14];
    p18 = p[18];
    p32 = p[32];
    p39 = p[39];
/*         F10.7 EFFECT */
    lpoly_1.df = *f107 - *f107a;
    lpoly_1.dfa = *f107a - 150.;
/* Computing 2nd power */
    d__1 = lpoly_1.dfa;
    ttest_2.t[0] = p[20] * lpoly_1.df + p[21] * lpoly_1.df * lpoly_1.df + p[
	    22] * lpoly_1.dfa + p[30] * (d__1 * d__1);
    f1 = (p[48] * lpoly_1.dfa + p[20] * lpoly_1.df + p[21] * lpoly_1.df * 
	    lpoly_1.df) * csw_1.swc[0] + 1.;
    f2 = (p[50] * lpoly_1.dfa + p[20] * lpoly_1.df + p[21] * lpoly_1.df * 
	    lpoly_1.df) * csw_1.swc[0] + 1.;
/*        TIME INDEPENDENT */
    ttest_2.t[1] = p[2] * lpoly_1.plg[2] + p[3] * lpoly_1.plg[4] + p[23] * 
	    lpoly_1.plg[6] + p[15] * lpoly_1.plg[2] * lpoly_1.dfa * csw_1.swc[
	    0] + p[27] * lpoly_1.plg[1];
/*        SYMMETRICAL ANNUAL */
    ttest_2.t[2] = p[19] * cd32;
/*        SYMMETRICAL SEMIANNUAL */
    ttest_2.t[3] = (p[16] + p[17] * lpoly_1.plg[2]) * cd18;
/*        ASYMMETRICAL ANNUAL */
    ttest_2.t[4] = f1 * (p[10] * lpoly_1.plg[1] + p[11] * lpoly_1.plg[3]) * 
	    cd14;
/*         ASYMMETRICAL SEMIANNUAL */
    ttest_2.t[5] = p[38] * lpoly_1.plg[1] * cd39;
/*        DIURNAL */
    if (csw_1.sw[6] == 0.) {
	goto L200;
    }
    t71 = p[12] * lpoly_1.plg[11] * cd14 * csw_1.swc[4];
    t72 = p[13] * lpoly_1.plg[11] * cd14 * csw_1.swc[4];
    ttest_2.t[6] = f2 * ((p[4] * lpoly_1.plg[10] + p[5] * lpoly_1.plg[12] + p[
	    28] * lpoly_1.plg[14] + t71) * lpoly_1.ctloc + (p[7] * 
	    lpoly_1.plg[10] + p[8] * lpoly_1.plg[12] + p[29] * lpoly_1.plg[14]
	     + t72) * lpoly_1.stloc);
L200:
/*        SEMIDIURNAL */
    if (csw_1.sw[7] == 0.) {
	goto L210;
    }
    t81 = (p[24] * lpoly_1.plg[21] + p[36] * lpoly_1.plg[23]) * cd14 * 
	    csw_1.swc[4];
    t82 = (p[34] * lpoly_1.plg[21] + p[37] * lpoly_1.plg[23]) * cd14 * 
	    csw_1.swc[4];
    ttest_2.t[7] = f2 * ((p[6] * lpoly_1.plg[20] + p[42] * lpoly_1.plg[22] + 
	    t81) * lpoly_1.c2tloc + (p[9] * lpoly_1.plg[20] + p[43] * 
	    lpoly_1.plg[22] + t82) * lpoly_1.s2tloc);
L210:
/*        TERDIURNAL */
    if (csw_1.sw[13] == 0.) {
	goto L220;
    }
    ttest_2.t[13] = f2 * ((p[40] * lpoly_1.plg[30] + (p[94] * lpoly_1.plg[31] 
	    + p[47] * lpoly_1.plg[33]) * cd14 * csw_1.swc[4]) * 
	    lpoly_1.s3tloc + (p[41] * lpoly_1.plg[30] + (p[95] * lpoly_1.plg[
	    31] + p[49] * lpoly_1.plg[33]) * cd14 * csw_1.swc[4]) * 
	    lpoly_1.c3tloc);
L220:
/*          MAGNETIC ACTIVITY BASED ON DAILY AP */
    if (sw9 == -1.) {
	goto L30;
    }
    lpoly_1.apd = ap[1] - 4.;
    p44 = p[44];
    p45 = p[45];
    if (p44 < 0.) {
	p44 = 1e-5;
    }
    lpoly_1.apdf = lpoly_1.apd + (p45 - 1.) * (lpoly_1.apd + (exp(-p44 * 
	    lpoly_1.apd) - 1.) / p44);
    if (csw_1.sw[8] == 0.) {
	goto L40;
    }
    ttest_2.t[8] = lpoly_1.apdf * (p[33] + p[46] * lpoly_1.plg[2] + p[35] * 
	    lpoly_1.plg[4] + (p[101] * lpoly_1.plg[1] + p[102] * lpoly_1.plg[
	    3] + p[103] * lpoly_1.plg[5]) * cd14 * csw_1.swc[4] + (p[122] * 
	    lpoly_1.plg[10] + p[123] * lpoly_1.plg[12] + p[124] * lpoly_1.plg[
	    14]) * csw_1.swc[6] * cos(hr * (*tloc - p[125])));
    goto L40;
L30:
    if (p[52] == 0.) {
	goto L40;
    }
    exp1 = exp(abs(p[52]) * -10800. / (p[139] * (45. - abs(*lat)) + 1.));
    if (exp1 > .99999) {
	exp1 = .99999;
    }
    exp2 = exp(abs(p[54]) * -10800.);
    if (exp2 > .99999) {
	exp2 = .99999;
    }
    if (p[25] < 1e-4) {
	p[25] = 1e-4;
    }
/* Computing 3rd power */
    d__1 = exp1;
/* Computing 4th power */
    d__2 = exp1, d__2 *= d__2;
/* Computing 12th power */
    d__3 = exp1, d__3 *= d__3, d__3 *= d__3;
/* Computing 8th power */
    d__4 = exp1, d__4 *= d__4, d__4 *= d__4;
/* Computing 19th power */
    d__5 = exp1, d__6 = d__5, d__5 *= d__5, d__6 *= d__5, d__5 *= d__5, d__5 
	    *= d__5;
    lpoly_1.apt[0] = (ap[2] - 4. + (p[26] - 1.) * (ap[2] - 4. + (exp(-abs(p[
	    25]) * (ap[2] - 4.)) - 1.) / abs(p[25])) + ((ap[3] - 4. + (p[26] 
	    - 1.) * (ap[3] - 4. + (exp(-abs(p[25]) * (ap[3] - 4.)) - 1.) / 
	    abs(p[25]))) * exp1 + (ap[4] - 4. + (p[26] - 1.) * (ap[4] - 4. + (
	    exp(-abs(p[25]) * (ap[4] - 4.)) - 1.) / abs(p[25]))) * exp1 * 
	    exp1 + (ap[5] - 4. + (p[26] - 1.) * (ap[5] - 4. + (exp(-abs(p[25])
	     * (ap[5] - 4.)) - 1.) / abs(p[25]))) * (d__1 * (d__1 * d__1)) + (
	    (ap[6] - 4. + (p[26] - 1.) * (ap[6] - 4. + (exp(-abs(p[25]) * (ap[
	    6] - 4.)) - 1.) / abs(p[25]))) * (d__2 * d__2) + (ap[7] - 4. + (p[
	    26] - 1.) * (ap[7] - 4. + (exp(-abs(p[25]) * (ap[7] - 4.)) - 1.) /
	     abs(p[25]))) * (d__3 * (d__3 * d__3))) * (1. - d__4 * d__4) / (
	    1. - exp1))) / (1. + (1. - d__6 * (d__5 * d__5)) / (1. - exp1) * 
	    pow_dd(&exp1, &c_b104));
/* Computing 3rd power */
    d__1 = exp2;
/* Computing 4th power */
    d__2 = exp2, d__2 *= d__2;
/* Computing 12th power */
    d__3 = exp2, d__3 *= d__3, d__3 *= d__3;
/* Computing 8th power */
    d__4 = exp2, d__4 *= d__4, d__4 *= d__4;
/* Computing 19th power */
    d__5 = exp2, d__6 = d__5, d__5 *= d__5, d__6 *= d__5, d__5 *= d__5, d__5 
	    *= d__5;
    lpoly_1.apt[2] = (ap[2] - 4. + (p[26] - 1.) * (ap[2] - 4. + (exp(-abs(p[
	    25]) * (ap[2] - 4.)) - 1.) / abs(p[25])) + ((ap[3] - 4. + (p[26] 
	    - 1.) * (ap[3] - 4. + (exp(-abs(p[25]) * (ap[3] - 4.)) - 1.) / 
	    abs(p[25]))) * exp2 + (ap[4] - 4. + (p[26] - 1.) * (ap[4] - 4. + (
	    exp(-abs(p[25]) * (ap[4] - 4.)) - 1.) / abs(p[25]))) * exp2 * 
	    exp2 + (ap[5] - 4. + (p[26] - 1.) * (ap[5] - 4. + (exp(-abs(p[25])
	     * (ap[5] - 4.)) - 1.) / abs(p[25]))) * (d__1 * (d__1 * d__1)) + (
	    (ap[6] - 4. + (p[26] - 1.) * (ap[6] - 4. + (exp(-abs(p[25]) * (ap[
	    6] - 4.)) - 1.) / abs(p[25]))) * (d__2 * d__2) + (ap[7] - 4. + (p[
	    26] - 1.) * (ap[7] - 4. + (exp(-abs(p[25]) * (ap[7] - 4.)) - 1.) /
	     abs(p[25]))) * (d__3 * (d__3 * d__3))) * (1. - d__4 * d__4) / (
	    1. - exp2))) / (1. + (1. - d__6 * (d__5 * d__5)) / (1. - exp2) * 
	    pow_dd(&exp2, &c_b104));
    if (csw_1.sw[8] == 0.) {
	goto L40;
    }
    ttest_2.t[8] = lpoly_1.apt[0] * (p[51] + p[97] * lpoly_1.plg[2] + p[55] * 
	    lpoly_1.plg[4] + (p[126] * lpoly_1.plg[1] + p[127] * lpoly_1.plg[
	    3] + p[128] * lpoly_1.plg[5]) * cd14 * csw_1.swc[4] + (p[129] * 
	    lpoly_1.plg[10] + p[130] * lpoly_1.plg[12] + p[131] * lpoly_1.plg[
	    14]) * csw_1.swc[6] * cos(hr * (*tloc - p[132])));
L40:
    if (csw_1.sw[9] == 0. || *long__ <= -1e3) {
	goto L49;
    }
/*        LONGITUDINAL */
    if (csw_1.sw[10] == 0.) {
	goto L230;
    }
    ttest_2.t[10] = (p[81] * lpoly_1.dfa * csw_1.swc[0] + 1.) * ((p[65] * 
	    lpoly_1.plg[11] + p[66] * lpoly_1.plg[13] + p[67] * lpoly_1.plg[
	    15] + p[104] * lpoly_1.plg[10] + p[105] * lpoly_1.plg[12] + p[106]
	     * lpoly_1.plg[14] + csw_1.swc[4] * (p[110] * lpoly_1.plg[10] + p[
	    111] * lpoly_1.plg[12] + p[112] * lpoly_1.plg[14]) * cd14) * 
	    lpoly_1.clong + (p[91] * lpoly_1.plg[11] + p[92] * lpoly_1.plg[13]
	     + p[93] * lpoly_1.plg[15] + p[107] * lpoly_1.plg[10] + p[108] * 
	    lpoly_1.plg[12] + p[109] * lpoly_1.plg[14] + csw_1.swc[4] * (p[
	    113] * lpoly_1.plg[10] + p[114] * lpoly_1.plg[12] + p[115] * 
	    lpoly_1.plg[14]) * cd14) * lpoly_1.slong);
L230:
/*        UT AND MIXED UT,LONGITUDE */
    if (csw_1.sw[11] == 0.) {
	goto L240;
    }
    ttest_2.t[11] = (p[96] * lpoly_1.plg[1] + 1.) * (p[82] * lpoly_1.dfa * 
	    csw_1.swc[0] + 1.) * (p[120] * lpoly_1.plg[1] * csw_1.swc[4] * 
	    cd14 + 1.) * ((p[69] * lpoly_1.plg[1] + p[70] * lpoly_1.plg[3] + 
	    p[71] * lpoly_1.plg[5]) * cos(sr * (*sec - p[72])));
    ttest_2.t[11] += csw_1.swc[10] * (p[77] * lpoly_1.plg[21] + p[78] * 
	    lpoly_1.plg[23] + p[79] * lpoly_1.plg[25]) * cos(sr * (*sec - p[
	    80]) + dgtr * 2. * *long__) * (p[138] * lpoly_1.dfa * csw_1.swc[0]
	     + 1.);
L240:
/*        UT,LONGITUDE MAGNETIC ACTIVITY */
    if (csw_1.sw[12] == 0.) {
	goto L48;
    }
    if (sw9 == -1.) {
	goto L45;
    }
    ttest_2.t[12] = lpoly_1.apdf * csw_1.swc[10] * (p[121] * lpoly_1.plg[1] + 
	    1.) * ((p[61] * lpoly_1.plg[11] + p[62] * lpoly_1.plg[13] + p[63] 
	    * lpoly_1.plg[15]) * cos(dgtr * (*long__ - p[64]))) + 
	    lpoly_1.apdf * csw_1.swc[10] * csw_1.swc[4] * (p[116] * 
	    lpoly_1.plg[10] + p[117] * lpoly_1.plg[12] + p[118] * lpoly_1.plg[
	    14]) * cd14 * cos(dgtr * (*long__ - p[119])) + lpoly_1.apdf * 
	    csw_1.swc[11] * (p[84] * lpoly_1.plg[1] + p[85] * lpoly_1.plg[3] 
	    + p[86] * lpoly_1.plg[5]) * cos(sr * (*sec - p[76]));
    goto L48;
L45:
    if (p[52] == 0.) {
	goto L48;
    }
    ttest_2.t[12] = lpoly_1.apt[0] * csw_1.swc[10] * (p[133] * lpoly_1.plg[1] 
	    + 1.) * ((p[53] * lpoly_1.plg[11] + p[99] * lpoly_1.plg[13] + p[
	    68] * lpoly_1.plg[15]) * cos(dgtr * (*long__ - p[98]))) + 
	    lpoly_1.apt[0] * csw_1.swc[10] * csw_1.swc[4] * (p[134] * 
	    lpoly_1.plg[10] + p[135] * lpoly_1.plg[12] + p[136] * lpoly_1.plg[
	    14]) * cd14 * cos(dgtr * (*long__ - p[137])) + lpoly_1.apt[0] * 
	    csw_1.swc[11] * (p[56] * lpoly_1.plg[1] + p[57] * lpoly_1.plg[3] 
	    + p[58] * lpoly_1.plg[5]) * cos(sr * (*sec - p[59]));
L48:
L49:
    ttest_2.tinf = p[31];
    i__1 = nsw;
    for (i__ = 1; i__ <= i__1; ++i__) {
/* L50: */
	ttest_2.tinf += (d__1 = csw_1.sw[i__ - 1], abs(d__1)) * ttest_2.t[i__ 
		- 1];
    }
    ret_val = ttest_2.tinf;
    return ret_val;
} /* globe6_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int tselec_0_(int n__, doublereal *sv, doublereal *svv)
{
    /* System generated locals */
    doublereal d__1, d__2;

    /* Builtin functions */
//    double d_mod(doublereal *, doublereal *);

    /* Local variables */
    static integer i__;
    static doublereal sav[25];

/*        SET SWITCHES */
/*        SW FOR MAIN TERMS, SWC FOR CROSS TERMS */
    /* Parameter adjustments */
    if (sv) {
	--sv;
	}
    if (svv) {
	--svv;
	}

    /* Function Body */
    switch(n__) {
	case 1: goto L_tretrv;
	}

    for (i__ = 1; i__ <= 25; ++i__) {
	sav[i__ - 1] = sv[i__];
	csw_1.sw[i__ - 1] = d_mod(&sv[i__], &c_b114);
	if ((d__1 = sv[i__], abs(d__1)) == 1. || (d__2 = sv[i__], abs(d__2)) 
		== 2.) {
	    csw_1.swc[i__ - 1] = 1.;
	} else {
	    csw_1.swc[i__ - 1] = 0.;
	}
/* L100: */
    }
    csw_1.isw = 64999;
    return 0;

L_tretrv:
    for (i__ = 1; i__ <= 25; ++i__) {
	svv[i__] = sav[i__ - 1];
/* L200: */
    }
    return 0;
} /* tselec_ */

/* Subroutine */ int tselec_(doublereal *sv)
{
    return tselec_0_(0, sv, (doublereal *)0);
    }

/* Subroutine */ int tretrv_(doublereal *svv)
{
    return tselec_0_(1, (doublereal *)0, svv);
    }

/* ---------------------------------------------------------------- */
doublereal glob6s_(doublereal *p)
{
    /* Initialized data */

    static doublereal dr = .0172142;
    static doublereal dayl = -1.;
    static doublereal p32 = -1e3;
    static doublereal p18 = -1e3;
    static doublereal p14 = -1e3;
    static doublereal p39 = -1e3;

    /* System generated locals */
    doublereal ret_val, d__1;

    /* Builtin functions */
    double cos(doublereal);

    /* Local variables */
    static integer i__, j;
    static doublereal t[14], t71, t72, t81, t82, tt, cd32, cd14, cd18, cd39;

/*      VERSION OF GLOBE FOR LOWER ATMOSPHERE 1/17/90 */
    /* Parameter adjustments */
    --p;

    /* Function Body */
    for (j = 1; j <= 14; ++j) {
	t[j - 1] = 0.;
/* L10: */
    }
    if (lpoly_2.day != dayl || p32 != p[32]) {
	cd32 = cos(dr * (lpoly_2.day - p[32]));
    }
    if (lpoly_2.day != dayl || p18 != p[18]) {
	cd18 = cos(dr * 2. * (lpoly_2.day - p[18]));
    }
    if (lpoly_2.day != dayl || p14 != p[14]) {
	cd14 = cos(dr * (lpoly_2.day - p[14]));
    }
    if (lpoly_2.day != dayl || p39 != p[39]) {
	cd39 = cos(dr * 2. * (lpoly_2.day - p[39]));
    }
    dayl = lpoly_2.day;
    p32 = p[32];
    p18 = p[18];
    p14 = p[14];
    p39 = p[39];

/*       F10.7 */
    t[0] = p[22] * lpoly_2.dfa;
/*       TIME INDEPENDENT */
    t[1] = p[2] * lpoly_2.plg[2] + p[3] * lpoly_2.plg[4] + p[23] * 
	    lpoly_2.plg[6] + p[27] * lpoly_2.plg[1] + p[28] * lpoly_2.plg[3] 
	    + p[29] * lpoly_2.plg[5];
/*       SYMMETRICAL ANNUAL */
    t[2] = (p[19] + p[48] * lpoly_2.plg[2] + p[30] * lpoly_2.plg[4]) * cd32;
/*       SYMMETRICAL SEMIANNUAL */
    t[3] = (p[16] + p[17] * lpoly_2.plg[2] + p[31] * lpoly_2.plg[4]) * cd18;
/*       ASYMMETRICAL ANNUAL */
    t[4] = (p[10] * lpoly_2.plg[1] + p[11] * lpoly_2.plg[3] + p[36] * 
	    lpoly_2.plg[5]) * cd14;
/*       ASYMMETRICAL SEMIANNUAL */
    t[5] = p[38] * lpoly_2.plg[1] * cd39;
/*        DIURNAL */
    if (csw_1.sw[6] == 0.) {
	goto L200;
    }
    t71 = p[12] * lpoly_2.plg[11] * cd14 * csw_1.swc[4];
    t72 = p[13] * lpoly_2.plg[11] * cd14 * csw_1.swc[4];
    t[6] = (p[4] * lpoly_2.plg[10] + p[5] * lpoly_2.plg[12] + t71) * 
	    lpoly_2.ctloc + (p[7] * lpoly_2.plg[10] + p[8] * lpoly_2.plg[12] 
	    + t72) * lpoly_2.stloc;
L200:
/*        SEMIDIURNAL */
    if (csw_1.sw[7] == 0.) {
	goto L210;
    }
    t81 = (p[24] * lpoly_2.plg[21] + p[47] * lpoly_2.plg[23]) * cd14 * 
	    csw_1.swc[4];
    t82 = (p[34] * lpoly_2.plg[21] + p[49] * lpoly_2.plg[23]) * cd14 * 
	    csw_1.swc[4];
    t[7] = (p[6] * lpoly_2.plg[20] + p[42] * lpoly_2.plg[22] + t81) * 
	    lpoly_2.c2tloc + (p[9] * lpoly_2.plg[20] + p[43] * lpoly_2.plg[22]
	     + t82) * lpoly_2.s2tloc;
L210:
/*        TERDIURNAL */
    if (csw_1.sw[13] == 0.) {
	goto L220;
    }
    t[13] = p[40] * lpoly_2.plg[30] * lpoly_2.s3tloc + p[41] * lpoly_2.plg[30]
	     * lpoly_2.c3tloc;
L220:
/*       MAGNETIC ACTIVITY */
    if (csw_1.sw[8] == 0.) {
	goto L40;
    }
    if (csw_1.sw[8] == 1.) {
	t[8] = lpoly_2.apdf * (p[33] + p[46] * lpoly_2.plg[2] * csw_1.swc[1]);
    }
    if (csw_1.sw[8] == -1.) {
	t[8] = p[51] * lpoly_2.apt[2] + p[97] * lpoly_2.plg[2] * lpoly_2.apt[
		2] * csw_1.swc[1];
    }
L40:
    if (csw_1.sw[9] == 0. || csw_1.sw[10] == 0. || lpoly_2.long__ <= -1e3) {
	goto L49;
    }
/*        LONGITUDINAL */
    t[10] = (lpoly_2.plg[1] * (p[81] * csw_1.swc[4] * cos(dr * (lpoly_2.day - 
	    p[82])) + p[86] * csw_1.swc[5] * cos(dr * 2. * (lpoly_2.day - p[
	    87]))) + 1. + p[84] * csw_1.swc[2] * cos(dr * (lpoly_2.day - p[85]
	    )) + p[88] * csw_1.swc[3] * cos(dr * 2. * (lpoly_2.day - p[89]))) 
	    * ((p[65] * lpoly_2.plg[11] + p[66] * lpoly_2.plg[13] + p[67] * 
	    lpoly_2.plg[15] + p[75] * lpoly_2.plg[10] + p[76] * lpoly_2.plg[
	    12] + p[77] * lpoly_2.plg[14]) * lpoly_2.clong + (p[91] * 
	    lpoly_2.plg[11] + p[92] * lpoly_2.plg[13] + p[93] * lpoly_2.plg[
	    15] + p[78] * lpoly_2.plg[10] + p[79] * lpoly_2.plg[12] + p[80] * 
	    lpoly_2.plg[14]) * lpoly_2.slong);
L49:
    tt = 0.;
    for (i__ = 1; i__ <= 14; ++i__) {
/* L50: */
	tt += (d__1 = csw_1.sw[i__ - 1], abs(d__1)) * t[i__ - 1];
    }
    ret_val = tt;
    return ret_val;
} /* glob6s_ */

/* ---------------------------------------------------------------- */
doublereal densu_(doublereal *alt, doublereal *dlb, doublereal *tinf, 
	doublereal *tlb, doublereal *xm, doublereal *alpha, doublereal *tz, 
	doublereal *zlb, doublereal *s2, integer *mn1, doublereal *zn1, 
	doublereal *tn1, doublereal *tgn1)
{
    /* Initialized data */

    static doublereal rgas = 831.4;

    /* System generated locals */
    integer i__1;
    doublereal ret_val, d__1, d__2;

    /* Builtin functions */
//    double exp(doublereal), pow_dd(doublereal *, doublereal *);

    /* Local variables */
    static doublereal gamm, expl;
    static integer k;
    static doublereal y2out[5], gamma, x, y, z__, densa, zgdif, t1, t2, z1, 
	    z2, ta, za;
    static integer mn;
    static doublereal zg, yi, tt, xs[5], ys[5];
    extern /* Subroutine */ int spline_(doublereal *, doublereal *, integer *,
	     doublereal *, doublereal *, doublereal *), splini_(doublereal *, 
	    doublereal *, doublereal *, integer *, doublereal *, doublereal *)
	    , splint_(doublereal *, doublereal *, doublereal *, integer *, 
	    doublereal *, doublereal *);
    static doublereal yd1, yd2, zg2, glb, dta;

/*       Calculate Temperature and Density Profiles for MSIS models */
/*       New lower thermo polynomial 10/30/89 */
    /* Parameter adjustments */
    --tn1;
    --zn1;
    --tgn1;

    /* Function Body */
/* CCCCCWRITE(6,*) 'DB',ALT,DLB,TINF,TLB,XM,ALPHA,ZLB,S2,MN1,ZN1,TN1 */
    ret_val = 1.;
/*        Joining altitude of Bates and spline */
    za = zn1[1];
    z__ = max(*alt,za);
/*      Geopotential altitude difference from ZLB */
    zg2 = (z__ - *zlb) * (parmb_1.re + *zlb) / (parmb_1.re + z__);
/*      Bates temperature */
    tt = *tinf - (*tinf - *tlb) * exp(-(*s2) * zg2);
    ta = tt;
    *tz = tt;
    ret_val = *tz;
    if (*alt >= za) {
	goto L10;
    }

/*       CALCULATE TEMPERATURE BELOW ZA */
/*      Temperature gradient at ZA from Bates profile */
/* Computing 2nd power */
    d__1 = (parmb_1.re + *zlb) / (parmb_1.re + za);
    dta = (*tinf - ta) * *s2 * (d__1 * d__1);
    tgn1[1] = dta;
    tn1[1] = ta;
/* Computing MAX */
    d__1 = *alt, d__2 = zn1[*mn1];
    z__ = max(d__1,d__2);
    mn = *mn1;
    z1 = zn1[1];
    z2 = zn1[mn];
    t1 = tn1[1];
    t2 = tn1[mn];
/*      Geopotental difference from Z1 */
    zg = (z__ - z1) * (parmb_1.re + z1) / (parmb_1.re + z__);
    zgdif = (z2 - z1) * (parmb_1.re + z1) / (parmb_1.re + z2);
/*       Set up spline nodes */
    i__1 = mn;
    for (k = 1; k <= i__1; ++k) {
	xs[k - 1] = (zn1[k] - z1) * (parmb_1.re + z1) / (parmb_1.re + zn1[k]) 
		/ zgdif;
	ys[k - 1] = 1. / tn1[k];
/* L20: */
    }
/*        End node derivatives */
    yd1 = -tgn1[1] / (t1 * t1) * zgdif;
/* Computing 2nd power */
    d__1 = (parmb_1.re + z2) / (parmb_1.re + z1);
    yd2 = -tgn1[2] / (t2 * t2) * zgdif * (d__1 * d__1);
/*       Calculate spline coefficients */
    spline_(xs, ys, &mn, &yd1, &yd2, y2out);
    x = zg / zgdif;
    splint_(xs, ys, y2out, &mn, &x, &y);
/*       temperature at altitude */
    *tz = 1. / y;
    ret_val = *tz;
L10:
    if (*xm == 0.) {
	goto L50;
    }

/*      CALCULATE DENSITY ABOVE ZA */
/* Computing 2nd power */
    d__1 = *zlb / parmb_1.re + 1.;
    glb = parmb_1.gsurf / (d__1 * d__1);
    gamma = *xm * glb / (*s2 * rgas * *tinf);
    expl = exp(-(*s2) * gamma * zg2);
    if (expl > 50. || tt <= 0.) {
	expl = 50.;
    }
/*       Density at altitude */
    d__1 = *tlb / tt;
    d__2 = *alpha + 1. + gamma;
    densa = *dlb * pow_dd(&d__1, &d__2) * expl;
    ret_val = densa;
    if (*alt >= za) {
	goto L50;
    }

/*      CALCULATE DENSITY BELOW ZA */
/* Computing 2nd power */
    d__1 = z1 / parmb_1.re + 1.;
    glb = parmb_1.gsurf / (d__1 * d__1);
    gamm = *xm * glb * zgdif / rgas;
/*       integrate spline temperatures */
    splini_(xs, ys, y2out, &mn, &x, &yi);
    expl = gamm * yi;
    if (expl > 50. || *tz <= 0.) {
	expl = 50.;
    }
/*       Density at altitude */
    d__1 = t1 / *tz;
    d__2 = *alpha + 1.;
    ret_val = ret_val * pow_dd(&d__1, &d__2) * exp(-expl);
L50:
    return ret_val;
} /* densu_ */

/* ---------------------------------------------------------------- */
doublereal densm_(doublereal *alt, doublereal *d0, doublereal *xm, doublereal
	*tz, integer *mn3, doublereal *zn3, doublereal *tn3, doublereal *tgn3,
	 integer *mn2, doublereal *zn2, doublereal *tn2, doublereal *tgn2)
{
    /* Initialized data */

    static doublereal rgas = 831.4;

    /* System generated locals */
    integer i__1;
    doublereal ret_val, d__1, d__2;

    /* Builtin functions */
    double exp(doublereal);

    /* Local variables */
    static doublereal gamm, expl;
    static integer k;
    static doublereal y2out[10], x, y, z__, zgdif, t1, t2, z1, z2;
    static integer mn;
    static doublereal zg, yi, xs[10], ys[10];
    extern /* Subroutine */ int spline_(doublereal *, doublereal *, integer *,
	     doublereal *, doublereal *, doublereal *), splini_(doublereal *, 
	    doublereal *, doublereal *, integer *, doublereal *, doublereal *)
	    , splint_(doublereal *, doublereal *, doublereal *, integer *, 
	    doublereal *, doublereal *);
    static doublereal yd1, yd2, glb;

/*       Calculate Temperature and Density Profiles for lower atmos. */
    /* Parameter adjustments */
    --tn3;
    --zn3;
    --tgn3;
    --tn2;
    --zn2;
    --tgn2;

    /* Function Body */
    ret_val = *d0;
    if (*alt > zn2[1]) {
	goto L50;
    }
/*      STRATOSPHERE/MESOSPHERE TEMPERATURE */
/* Computing MAX */
    d__1 = *alt, d__2 = zn2[*mn2];
    z__ = max(d__1,d__2);
    mn = *mn2;
    z1 = zn2[1];
    z2 = zn2[mn];
    t1 = tn2[1];
    t2 = tn2[mn];
    zg = (z__ - z1) * (parmb_1.re + z1) / (parmb_1.re + z__);
    zgdif = (z2 - z1) * (parmb_1.re + z1) / (parmb_1.re + z2);
/*       Set up spline nodes */
    i__1 = mn;
    for (k = 1; k <= i__1; ++k) {
	xs[k - 1] = (zn2[k] - z1) * (parmb_1.re + z1) / (parmb_1.re + zn2[k]) 
		/ zgdif;
	ys[k - 1] = 1. / tn2[k];
/* L210: */
    }
    yd1 = -tgn2[1] / (t1 * t1) * zgdif;
/* Computing 2nd power */
    d__1 = (parmb_1.re + z2) / (parmb_1.re + z1);
    yd2 = -tgn2[2] / (t2 * t2) * zgdif * (d__1 * d__1);
/*       Calculate spline coefficients */
    spline_(xs, ys, &mn, &yd1, &yd2, y2out);
    x = zg / zgdif;
    splint_(xs, ys, y2out, &mn, &x, &y);
/*       Temperature at altitude */
    *tz = 1. / y;
    if (*xm == 0.) {
	goto L20;
    }

/*      CALCULATE STRATOSPHERE/MESOSPHERE DENSITY */
/* Computing 2nd power */
    d__1 = z1 / parmb_1.re + 1.;
    glb = parmb_1.gsurf / (d__1 * d__1);
    gamm = *xm * glb * zgdif / rgas;
/*       Integrate temperature profile */
    splini_(xs, ys, y2out, &mn, &x, &yi);
    expl = gamm * yi;
    if (expl > 50.) {
	expl = 50.;
    }
/*       Density at altitude */
    ret_val = ret_val * (t1 / *tz) * exp(-expl);
L20:
    if (*alt > zn3[1]) {
	goto L50;
    }

/*      TROPOSPHERE/STRATOSPHERE TEMPERATURE */
    z__ = *alt;
    mn = *mn3;
    z1 = zn3[1];
    z2 = zn3[mn];
    t1 = tn3[1];
    t2 = tn3[mn];
    zg = (z__ - z1) * (parmb_1.re + z1) / (parmb_1.re + z__);
    zgdif = (z2 - z1) * (parmb_1.re + z1) / (parmb_1.re + z2);
/*       Set up spline nodes */
    i__1 = mn;
    for (k = 1; k <= i__1; ++k) {
	xs[k - 1] = (zn3[k] - z1) * (parmb_1.re + z1) / (parmb_1.re + zn3[k]) 
		/ zgdif;
	ys[k - 1] = 1. / tn3[k];
/* L220: */
    }
    yd1 = -tgn3[1] / (t1 * t1) * zgdif;
/* Computing 2nd power */
    d__1 = (parmb_1.re + z2) / (parmb_1.re + z1);
    yd2 = -tgn3[2] / (t2 * t2) * zgdif * (d__1 * d__1);
/*       Calculate spline coefficients */
    spline_(xs, ys, &mn, &yd1, &yd2, y2out);
    x = zg / zgdif;
    splint_(xs, ys, y2out, &mn, &x, &y);
/*       temperature at altitude */
    *tz = 1. / y;
    if (*xm == 0.) {
	goto L30;
    }

/*      CALCULATE TROPOSPHERIC/STRATOSPHERE DENSITY */

/* Computing 2nd power */
    d__1 = z1 / parmb_1.re + 1.;
    glb = parmb_1.gsurf / (d__1 * d__1);
    gamm = *xm * glb * zgdif / rgas;
/*        Integrate temperature profile */
    splini_(xs, ys, y2out, &mn, &x, &yi);
    expl = gamm * yi;
    if (expl > 50.) {
	expl = 50.;
    }
/*        Density at altitude */
    ret_val = ret_val * (t1 / *tz) * exp(-expl);
L30:
L50:
    if (*xm == 0.) {
	ret_val = *tz;
    }
    return ret_val;
} /* densm_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int spline_(doublereal *x, doublereal *y, integer *n, 
	doublereal *yp1, doublereal *ypn, doublereal *y2)
{
    /* System generated locals */
    integer i__1;

    /* Local variables */
    static integer i__, k;
    static doublereal p, u[100], qn, un, sig;

/*        CALCULATE 2ND DERIVATIVES OF CUBIC SPLINE INTERP FUNCTION */
/*        ADAPTED FROM NUMERICAL RECIPES BY PRESS ET AL */
/*        X,Y: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X */
/*        N: SIZE OF ARRAYS X,Y */
/*        YP1,YPN: SPECIFIED DERIVATIVES AT X(1) AND X(N); VALUES */
/*                 >= 1E30 SIGNAL SIGNAL SECOND DERIVATIVE ZERO */
/*        Y2: OUTPUT ARRAY OF SECOND DERIVATIVES */
    /* Parameter adjustments */
    --y2;
    --y;
    --x;

    /* Function Body */
    if (*yp1 > 9.9e29) {
	y2[1] = 0.;
	u[0] = 0.;
    } else {
	y2[1] = -.5;
	u[0] = 3. / (x[2] - x[1]) * ((y[2] - y[1]) / (x[2] - x[1]) - *yp1);
    }
    i__1 = *n - 1;
    for (i__ = 2; i__ <= i__1; ++i__) {
	sig = (x[i__] - x[i__ - 1]) / (x[i__ + 1] - x[i__ - 1]);
	p = sig * y2[i__ - 1] + 2.;
	y2[i__] = (sig - 1.) / p;
	u[i__ - 1] = (((y[i__ + 1] - y[i__]) / (x[i__ + 1] - x[i__]) - (y[i__]
		 - y[i__ - 1]) / (x[i__] - x[i__ - 1])) * 6. / (x[i__ + 1] - 
		x[i__ - 1]) - sig * u[i__ - 2]) / p;
/* L11: */
    }
    if (*ypn > 9.9e29) {
	qn = 0.;
	un = 0.;
    } else {
	qn = .5;
	un = 3. / (x[*n] - x[*n - 1]) * (*ypn - (y[*n] - y[*n - 1]) / (x[*n] 
		- x[*n - 1]));
    }
    y2[*n] = (un - qn * u[*n - 2]) / (qn * y2[*n - 1] + 1.);
    for (k = *n - 1; k >= 1; --k) {
	y2[k] = y2[k] * y2[k + 1] + u[k - 1];
/* L12: */
    }
    return 0;
} /* spline_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int splint_(doublereal *xa, doublereal *ya, doublereal *y2a, 
	integer *n, doublereal *x, doublereal *y)
{
    /* Builtin functions */
//    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), e_wsle(void);

    /* Local variables */
    static doublereal a, b, h__;
    static integer k, khi, klo;

    /* Fortran I/O blocks */
    static cilist io___242 = { 0, 6, 0, 0, 0 };


/*        CALCULATE CUBIC SPLINE INTERP VALUE */
/*        ADAPTED FROM NUMBERICAL RECIPES BY PRESS ET AL. */
/*        XA,YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X */
/*        Y2A: ARRAY OF SECOND DERIVATIVES */
/*        N: SIZE OF ARRAYS XA,YA,Y2A */
/*        X: ABSCISSA FOR INTERPOLATION */
/*        Y: OUTPUT VALUE */
    /* Parameter adjustments */
    --y2a;
    --ya;
    --xa;

    /* Function Body */
    klo = 1;
    khi = *n;
L1:
    if (khi - klo > 1) {
	k = (khi + klo) / 2;
	if (xa[k] > *x) {
	    khi = k;
	} else {
	    klo = k;
	}
	goto L1;
    }
    h__ = xa[khi] - xa[klo];
    if (h__ == 0.) {
	s_wsle(&io___242);
	do_lio(&c__9, &c__1, "BAD XA INPUT TO SPLINT", (ftnlen)22);
	e_wsle();
    }
    a = (xa[khi] - *x) / h__;
    b = (*x - xa[klo]) / h__;
    *y = a * ya[klo] + b * ya[khi] + ((a * a * a - a) * y2a[klo] + (b * b * b 
	    - b) * y2a[khi]) * h__ * h__ / 6.;
    return 0;
} /* splint_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int splini_(doublereal *xa, doublereal *ya, doublereal *y2a, 
	integer *n, doublereal *x, doublereal *yi)
{
    /* System generated locals */
    doublereal d__1, d__2;

    /* Local variables */
    static doublereal a, b, h__, a2, b2, xx;
    static integer khi, klo;

/*       INTEGRATE CUBIC SPLINE FUNCTION FROM XA(1) TO X */
/*        XA,YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X */
/*        Y2A: ARRAY OF SECOND DERIVATIVES */
/*        N: SIZE OF ARRAYS XA,YA,Y2A */
/*        X: ABSCISSA ENDPOINT FOR INTEGRATION */
/*        Y: OUTPUT VALUE */
    /* Parameter adjustments */
    --y2a;
    --ya;
    --xa;

    /* Function Body */
    *yi = 0.;
    klo = 1;
    khi = 2;
L1:
    if (*x > xa[klo] && khi <= *n) {
	xx = *x;
	if (khi < *n) {
/* Computing MIN */
	    d__1 = *x, d__2 = xa[khi];
	    xx = min(d__1,d__2);
	}
	h__ = xa[khi] - xa[klo];
	a = (xa[khi] - xx) / h__;
	b = (xx - xa[klo]) / h__;
	a2 = a * a;
	b2 = b * b;
	*yi += ((1. - a2) * ya[klo] / 2. + b2 * ya[khi] / 2. + ((-(a2 * a2 + 
		1.) / 4. + a2 / 2.) * y2a[klo] + (b2 * b2 / 4. - b2 / 2.) * 
		y2a[khi]) * h__ * h__ / 6.) * h__;
	++klo;
	++khi;
	goto L1;
    }
    return 0;
} /* splini_ */

/* ---------------------------------------------------------------- */
doublereal dnet_(doublereal *dd, doublereal *dm, doublereal *zhm, doublereal *
	xmm, doublereal *xm)
{
    /* System generated locals */
    doublereal ret_val, d__1, d__2;

    /* Builtin functions */
//    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), e_wsle(void);
//    double log(doublereal), exp(doublereal), pow_dd(doublereal *, doublereal * );

    /* Local variables */
    static doublereal ylog, a;

    /* Fortran I/O blocks */
    static cilist io___254 = { 0, 6, 0, 0, 0 };


/*       TURBOPAUSE CORRECTION FOR MSIS MODELS */
/*         Root mean density */
/*       8/20/80 */
/*          DD - diffusive density */
/*          DM - full mixed density */
/*          ZHM - transition scale length */
/*          XMM - full mixed molecular weight */
/*          XM  - species molecular weight */
/*          DNET - combined density */
    a = *zhm / (*xmm - *xm);
    if (*dm > 0. && *dd > 0.) {
	goto L5;
    }
    s_wsle(&io___254);
    do_lio(&c__9, &c__1, "DNET LOG ERROR", (ftnlen)14);
    do_lio(&c__5, &c__1, (char *)&(*dm), (ftnlen)sizeof(doublereal));
    do_lio(&c__5, &c__1, (char *)&(*dd), (ftnlen)sizeof(doublereal));
    do_lio(&c__5, &c__1, (char *)&(*xm), (ftnlen)sizeof(doublereal));
    e_wsle();
    if (*dd == 0. && *dm == 0.) {
	*dd = 1.;
    }
    if (*dm == 0.) {
	goto L10;
    }
    if (*dd == 0.) {
	goto L20;
    }
L5:
    ylog = a * log(*dm / *dd);
    if (ylog < -10.) {
	goto L10;
    }
    if (ylog > 10.) {
	goto L20;
    }
    d__1 = exp(ylog) + 1.;
    d__2 = 1 / a;
    ret_val = *dd * pow_dd(&d__1, &d__2);
    goto L50;
L10:
    ret_val = *dd;
    goto L50;
L20:
    ret_val = *dm;
    goto L50;
L50:
    return ret_val;
} /* dnet_ */

/* ---------------------------------------------------------------- */
doublereal ccor_(doublereal *alt, doublereal *r__, doublereal *h1, doublereal 
	*zh)
{
    /* System generated locals */
    doublereal ret_val;

    /* Builtin functions */
    double exp(doublereal);

    /* Local variables */
    static doublereal e, ex;

/*        CHEMISTRY/DISSOCIATION CORRECTION FOR MSIS MODELS */
/*        ALT - altitude */
/*        R - target ratio */
/*        H1 - transition scale length */
/*        ZH - altitude of 1/2 R */
    e = (*alt - *zh) / *h1;
    if (e > 70.) {
	goto L20;
    }
    if (e < -70.) {
	goto L10;
    }
    ex = exp(e);
    ret_val = *r__ / (ex + 1.);
    goto L50;
L10:
    ret_val = *r__;
    goto L50;
L20:
    ret_val = 0.;
    goto L50;
L50:
    ret_val = exp(ret_val);
    return ret_val;
} /* ccor_ */

/* ---------------------------------------------------------------- */
/* Subroutine */ int gtd6bk_(void)
{
    return 0;
} /* gtd6bk_ */
/* ---------------------------------------------------------------- */
int test_msise90 (void){
// TEST DRIVER FOR GTD6 (ATMOSPHERIC MODEL)
doublereal  D[128] /* was [8][16] */, T[32] /* was [2][16] */;

integer     IDAY[15] = {172, 81, 172, 172, 172, 172, 172, 172, 172, 172, 172,
                        172, 172, 172, 172};
doublereal  UT[15] = {29000., 29000., 75000., 29000., 29000., 29000., 29000.,
                        29000., 29000., 29000., 29000.,
                        29000., 29000., 29000., 29000.};
doublereal  ALT[15] = {400., 400., 400., 100., 400., 400., 400., 400., 400.,
                        400., 0., 10., 30., 50., 70.};
doublereal  XLAT[15] = {60., 60., 60., 60., 0., 60., 60., 60., 60., 60.,
                        60., 60., 60., 60., 60.};
doublereal  XLONG[15] = {-70., -70., -70., -70., -70., 0., -70., -70.,
                            -70., -70., -70., -70., -70., -70., -70.};
doublereal  XLST[15] = {16., 16., 16., 16., 16., 16., 4., 16., 16., 16.,
                        16., 16., 16., 16., 16.};
doublereal  F107A[15] = {150., 150., 150., 150., 150., 150., 150., 70.,
                        150., 150., 150., 150., 150., 150., 150.};
doublereal  F107[15] = {150., 150., 150., 150., 150., 150., 150., 150.,
                        180., 150., 150., 150., 150., 150., 150.};
doublereal  AP[15] = {4., 4., 4., 4., 4., 4., 4., 4., 4., 40.,
                        4., 4., 4., 4., 4.};
doublereal  APH[7] = {100., 100., 100., 100., 100., 100., 100.};
doublereal  SW[25] = {1., 1., 1., 1., 1., 1., 1., 1., -1., 1., 1., 1., 1.,
                        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.};
integer     i, j, mass;

    mass = 48;
    for (i = 0; i < 15; i++){
        gtd6_(IDAY+i, UT+i, ALT+i, XLAT+i, XLONG+i, XLST+i, F107A+i, F107+i,
            AP+i, &mass, D+i*8, T+i*2);
        for (j = 0; j < 8; j++){
            printf("%9.2e ",D[i*8+j]);
        }
        printf("\n %10.3e %10.3e\n",T[i*2],T[i*2+1]);
        printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n",
                gts3c_1.tlb, gts3c_1.s, gts3c_1.db04, gts3c_1.db16, gts3c_1.db28, gts3c_1.db32, gts3c_1.db40, gts3c_1.db48);
        printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n\n",
                gts3c_1.db01, gts3c_1.za, gts3c_1.t0, gts3c_1.z0, gts3c_1.g0, gts3c_1.rl, gts3c_1.dd, gts3c_1.db14);
    }

    tselec_(SW);
    i = 15;
//==
    gtd6_(IDAY, UT, ALT, XLAT, XLONG, XLST, F107A, F107, APH, &mass, D+i*8, T+i*2);
    for (j = 0; j < 8; j++){
        printf("%9.2e ",D[i*8+j]);
    }
    printf("\n %10.3e %10.3e\n",T[i*2],T[i*2+1]);
    printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n",
            gts3c_1.tlb, gts3c_1.s, gts3c_1.db04, gts3c_1.db16, gts3c_1.db28, gts3c_1.db32, gts3c_1.db40, gts3c_1.db48);
    printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n\n",
            gts3c_1.db01, gts3c_1.za, gts3c_1.t0, gts3c_1.z0, gts3c_1.g0, gts3c_1.rl, gts3c_1.dd, gts3c_1.db14);
//==
    gtd6_(IDAY, UT, ALT+3, XLAT, XLONG, XLST, F107A, F107, APH, &mass, D+i*8, T+i*2);
    for (j = 0; j < 8; j++){
        printf("%9.2e ",D[i*8+j]);
    }
    printf("\n %10.3e %10.3e\n",T[i*2],T[i*2+1]);
    printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n",
            gts3c_1.tlb, gts3c_1.s, gts3c_1.db04, gts3c_1.db16, gts3c_1.db28, gts3c_1.db32, gts3c_1.db40, gts3c_1.db48);
    printf("%9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e\n\n",
            gts3c_1.db01, gts3c_1.za, gts3c_1.t0, gts3c_1.z0, gts3c_1.g0, gts3c_1.rl, gts3c_1.dd, gts3c_1.db14);
//==
    printf("%s  %s  %s\n",datime_1.isdate, datime_1.istime, datime_1.name__);
    //===
    printf(" DAY  ");
    for (i=0; i<5; i++)
        printf("%12d",IDAY[i]);
    puts("");
    //===
    printf(" UT   ");
    for (i=0; i<5; i++)
        printf("%12.0f",UT[i]);
    puts("");
    //===
    printf(" ALT  ");
    for (i=0; i<5; i++)
        printf("%12.0f",ALT[i]);
    puts("");
    //===
    printf(" LAT  ");
    for (i=0; i<5; i++)
        printf("%12.0f",XLAT[i]);
    puts("");
    //===
    printf(" LONG ");
    for (i=0; i<5; i++)
        printf("%12.0f",XLONG[i]);
    puts("");
    //===
    printf(" LST  ");
    for (i=0; i<5; i++)
        printf("%12.0f",XLST[i]);
    puts("");
    //===
    printf(" F107A");
    for (i=0; i<5; i++)
        printf("%12.0f",F107A[i]);
    puts("");
    //===
    printf(" F107 ");
    for (i=0; i<5; i++)
        printf("%12.0f",F107[i]);
    puts("");
    //===
    printf("\n TINF ");
    for (i=0; i<5; i++)
        printf("%12.2f",T[i*2]);
    puts("");
    //===
    printf(" TG   ");
    for (i=0; i<5; i++)
        printf("%12.2f",T[i*2+1]);
    puts("");
    //===
    printf(" HE   ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8]);
    puts("");
    //===
    printf(" O    ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+1]);
    puts("");
    //===
    printf(" N2   ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+2]);
    puts("");
    //===
    printf(" O2   ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+3]);
    puts("");
    //===
    printf(" AR   ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+4]);
    puts("");
    //===
    printf(" H    ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+6]);
    puts("");
    //===
    printf(" N    ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+7]);
    puts("");
    //===
    printf(" RHO  ");
    for (i=0; i<5; i++)
        printf("%12.3e",D[i*8+5]);
    puts("\n");
    //===

    // 6-10
    printf(" DAY  ");
    for (i=5; i<10; i++)
        printf("%12d",IDAY[i]);
    puts("");
    //===
    printf(" UT   ");
    for (i=5; i<10; i++)
        printf("%12.0f",UT[i]);
    puts("");
    //===
    printf(" ALT  ");
    for (i=5; i<10; i++)
        printf("%12.0f",ALT[i]);
    puts("");
    //===
    printf(" LAT  ");
    for (i=5; i<10; i++)
        printf("%12.0f",XLAT[i]);
    puts("");
    //===
    printf(" LONG ");
    for (i=5; i<10; i++)
        printf("%12.0f",XLONG[i]);
    puts("");
    //===
    printf(" LST  ");
    for (i=5; i<10; i++)
        printf("%12.0f",XLST[i]);
    puts("");
    //===
    printf(" F107A");
    for (i=5; i<10; i++)
        printf("%12.0f",F107A[i]);
    puts("");
    //===
    printf(" F107 ");
    for (i=5; i<10; i++)
        printf("%12.0f",F107[i]);
    puts("");
    //===
    printf("\n TINF ");
    for (i=5; i<10; i++)
        printf("%12.2f",T[i*2]);
    puts("");
    //===
    printf(" TG   ");
    for (i=5; i<10; i++)
        printf("%12.2f",T[i*2+1]);
    puts("");
    //===
    printf(" HE   ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8]);
    puts("");
    //===
    printf(" O    ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+1]);
    puts("");
    //===
    printf(" N2   ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+2]);
    puts("");
    //===
    printf(" O2   ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+3]);
    puts("");
    //===
    printf(" AR   ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+4]);
    puts("");
    //===
    printf(" H    ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+6]);
    puts("");
    //===
    printf(" N    ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+7]);
    puts("");
    //===
    printf(" RHO  ");
    for (i=5; i<10; i++)
        printf("%12.3e",D[i*8+5]);
    puts("\n");
    //===

    // 11-15
    printf(" DAY  ");
    for (i=10; i<15; i++)
        printf("%12d",IDAY[i]);
    puts("");
    //===
    printf(" UT   ");
    for (i=10; i<15; i++)
        printf("%12.0f",UT[i]);
    puts("");
    //===
    printf(" ALT  ");
    for (i=10; i<15; i++)
        printf("%12.0f",ALT[i]);
    puts("");
    //===
    printf(" LAT  ");
    for (i=10; i<15; i++)
        printf("%12.0f",XLAT[i]);
    puts("");
    //===
    printf(" LONG ");
    for (i=10; i<15; i++)
        printf("%12.0f",XLONG[i]);
    puts("");
    //===
    printf(" LST  ");
    for (i=10; i<15; i++)
        printf("%12.0f",XLST[i]);
    puts("");
    //===
    printf(" F107A");
    for (i=10; i<15; i++)
        printf("%12.0f",F107A[i]);
    puts("");
    //===
    printf(" F107 ");
    for (i=10; i<15; i++)
        printf("%12.0f",F107[i]);
    puts("");
    //===
    printf("\n TINF ");
    for (i=10; i<15; i++)
        printf("%12.2f",T[i*2]);
    puts("");
    //===
    printf(" TG   ");
    for (i=10; i<15; i++)
        printf("%12.2f",T[i*2+1]);
    puts("");
    //===
    printf(" HE   ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8]);
    puts("");
    //===
    printf(" O    ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+1]);
    puts("");
    //===
    printf(" N2   ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+2]);
    puts("");
    //===
    printf(" O2   ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+3]);
    puts("");
    //===
    printf(" AR   ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+4]);
    puts("");
    //===
    printf(" H    ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+6]);
    puts("");
    //===
    printf(" N    ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+7]);
    puts("");
    //===
    printf(" RHO  ");
    for (i=10; i<15; i++)
        printf("%12.3e",D[i*8+5]);
    puts("\n");
    //===

    return 0;
}
//---------------------------------------------------------------------------
