#include <math.h>
#include "paths.h"

void magfis(double fi,
	    double teta,
	    double r,
	    double hp[3],
	    double dhp[3][3],
	    double dhp2[3][3][3])
/****************************************************************/
/*                                                              */
/* Функция вычисляет физические компоненты магнитного поля      */
/* Земли (hp) и их производные по пространственным координатам  */
/* в точке со сферическими координатами (fi,teta,r).            */
/* Функция представляет собой дополненную и переработанную      */
/* подпрограмму MAGFIM (версия 79/05/31), используемую методом  */
/* МККР.                                                        */
/*                                                              */
/*VGG                                                           */
/****************************************************************/
{
  double ar[7],t,
       	 rnor,dt,anr,sumf,sumt,sumr,sumff,sumft,sumtt,
	 sumfff,sumfft,sumftt,sumttt,aranr,am,am2,

  g[7][7]  ={ .0,.304112,.024035,-.031518,-.041794,.016256,
	     -.019523,.0,.021474,-.051253,.062130,-.045298,
	     -.034407,-.004853,.0,.0,-.013381,-.024898,-.021795,-.019447,
	      .003212,.0,.0,.0,-.006496,.007008,-.000608,.021413,
	      .0,.0,.0,.0,-.002044,.002775,.001051,.0,.0,.0,.0,.0,
	      .000697,.000227,.0,.0,.0,.0,.0,.0,.001115},
  h[7][7]  ={ .0,.0,.0,.0,.0,.0,.0,.0,-.057989,.033124,.014870,-.011825,
	     -.000796,-.005758,.0,.0,-.001579,-.004075,.010006,-.002000,
	     -.008735,.0,.0,.0,.000210,.000430,.004597,-.003406,
	      .0,.0,.0,.0,.001385,.002421,-.000118,.0,.0,.0,.0,.0,-.001218,
	     -.001116,.0,.0,.0,.0,.0,.0,-.000325},
  ctt[7][7]={ .0,.0,.33333333,.26666667,.25714286,.25396825,
	      .25252525,.0,.0,.0,.2,.22857142,.23809523,.24242424,
	      .0,.0,.0,.0,.14285714,.19047619,.2121212,.0,.0,.0,.0,.0,
	      .1111111,.16161616,.0,.0,.0,.0,.0,.0,.09090909,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};

  int  n1,n2,np,nm;

  double
  s[7]      ={.0,.0,.0,.0,.0,.0,.0},
  c[7]      ={1.,.0,.0,.0,.0,.0,.0},
  p[7][7]   ={1.,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0},
  dp[7][7]  ={.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0},
  ddp[7][7] ={.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0},

  dddp[7][7]={.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,
	      .0,.0,.0,.0,.0,.0,.0};


  int m,n,i,j;


  rnor=R0/r;
  ar[0]=rnor*rnor;

  for(n=1; n<7; n++)
    {
      nm=n-1;
      s[n]=sf*c[nm]+cf*s[nm];
      c[n]=cf*c[nm]-sf*s[nm];
      ar[n]=ar[nm]*rnor;
    }

  for(i=0; i<3; i++)
    {
      hp[i]=.0;

      for(j=0;j<3; j++)
	{
	  dhp[j][i]=.0;

	  for(m=0; m<3; m++)
	    dhp2[m][j][i]=.0;
	}
    }

  for(n=1; n<7; n++)
    {
      n1=n-1;
      n2=n-2;
      np=n+1;

      sumr=sumt=sumf=.0;

      sumtt=sumft=sumff=.0;

      sumfff=sumfft=sumftt=sumttt=.0;

      anr=(n+2)/r;
      aranr=ar[n]*anr;
      anr=anr+1./r;

      for(m=0; m<=n; m++)
	{
	  am=m;
	  am2=am*am;

	  if (n==m)
	    {
	      p[m][n]=st*p[n1][n1];
	      dp[m][n]=st*dp[n1][n1]+ct*p[n1][n1];
	      ddp[m][n]=st*(ddp[n1][n1]-p[n1][n1])+2.*ct*dp[n1][n1];
	      dddp[m][n]=st*(dddp[n1][n1]-3.*dp[n1][n1])+
			 ct*(3.*ddp[n1][n1]-p[n1][n1]);
	    }
	  else
	    {
	      p[m][n]=ct*p[m][n1];
	      dp[m][n]=ct*dp[m][n1]-st*p[m][n1];
	      ddp[m][n]=ct*(ddp[m][n1]-p[m][n1])-2.*st*dp[m][n1];
	      dddp[m][n]=ct*(dddp[m][n1]-3.*dp[m][n1])-
			 st*(3.*ddp[m][n1]-p[m][n1]);

	      if (n>1)
		{
		  p[m][n]=p[m][n]-ctt[m][n]*p[m][n2];
		  dp[m][n]=dp[m][n]-ctt[m][n]*dp[m][n2];
		  ddp[m][n]=ddp[m][n]-ctt[m][n]*ddp[m][n2];
		  dddp[m][n]=dddp[m][n]-ctt[m][n]*dddp[m][n2];
		}
	    }

	  t=g[m][n]*c[m]+h[m][n]*s[m];
	  sumr +=p[m][n]*t;
	  sumt +=dp[m][n]*t;
	  sumtt +=ddp[m][n]*t;
	  sumttt+=dddp[m][n]*t;

	  if (m)
	    {
	      dt=(h[m][n]*c[m]-g[m][n]*s[m])*am;
	      sumf  +=p[m][n]*dt;
	      sumft +=dp[m][n]*dt;
	      sumff -=p[m][n]*t*am2;
	      sumfff-=p[m][n]*dt*am2;
	      sumfft-=dp[m][n]*t*am2;
	      sumftt+=ddp[m][n]*dt;
	    }
	}

      hp[0]      +=ar[n]*sumf;
      hp[1]      -=ar[n]*sumt;
      hp[2]      -=ar[n]*sumr*np;
      dhp[0][0]  +=ar[n]*sumff;
      dhp[0][1]  +=ar[n]*sumft;
      dhp[0][2]  -=sumf*aranr;
      dhp[1][1]  -=ar[n]*sumtt;
      dhp[1][2]  +=sumt*aranr;
      dhp[2][0]  -=ar[n]*sumf*np;
      dhp[2][1]  -=ar[n]*sumt*np;
      dhp[2][2]  +=sumr*np*aranr;
      dhp2[0][0][0]  +=ar[n]*sumfff;
      dhp2[0][0][1]  +=ar[n]*sumfft;
      dhp2[0][0][2]  -=sumff*aranr;
      dhp2[0][1][1]  +=ar[n]*sumftt;
      dhp2[0][1][2]  -=sumft*aranr;
      dhp2[0][2][2]  +=sumf*aranr*anr;
      dhp2[1][1][0]  -=ar[n]*sumftt;
      dhp2[1][1][1]  -=ar[n]*sumttt;
      dhp2[1][1][2]  +=sumtt*aranr;
      dhp2[1][2][2]  -=sumt*aranr*anr;
      dhp2[2][0][0]  -=ar[n]*sumff*np;
      dhp2[2][0][1]  -=ar[n]*sumft*np;
      dhp2[2][0][2]  +=sumf*aranr*np;
      dhp2[2][1][1]  -=ar[n]*sumtt*np;
      dhp2[2][1][2]  +=sumt*aranr*np;
      dhp2[2][2][2]  -=sumr*aranr*anr*np;
    }

  dhp[1][0]=-dhp[0][1];
  hp[0]=hp[0]/st;
  dhp[0][2]=dhp[0][2]/st;
  dhp[0][1]=(dhp[0][1]-ct*hp[0])/st;
  dhp[0][0]=dhp[0][0]/st;
  dhp2[0][1][0]=dhp2[0][0][1];
  dhp2[0][2][0]=dhp2[0][0][2];
  dhp2[0][2][1]=dhp2[0][1][2];
  dhp2[1][0][0]=-dhp2[0][1][0];
  dhp2[1][0][1]=-dhp2[0][1][1];
  dhp2[1][0][2]=-dhp2[0][1][2];
  dhp2[1][2][0]=dhp2[1][0][2];
  dhp2[1][2][1]=dhp2[1][1][2];
  dhp2[2][1][0]=dhp2[2][0][1];
  dhp2[2][2][0]=dhp2[2][0][2];
  dhp2[2][2][1]=dhp2[2][1][2];
  dhp2[0][0][0]=dhp2[0][0][0]/st;
  dhp2[0][0][1]=(dhp2[0][0][1]-ct*dhp[0][0])/st;
  dhp2[0][0][2]=dhp2[0][0][2]/st;
  dhp2[0][1][0]=dhp2[0][0][1];
  dhp2[0][1][1]=(dhp2[0][1][1]-2.*ct*dhp[0][1])/st+hp[0];
  dhp2[0][1][2]=(dhp2[0][1][2]-ct*dhp[0][2])/st;
  dhp2[0][2][0]=dhp2[0][0][2];
  dhp2[0][2][1]=dhp2[0][1][2];
  dhp2[0][2][2]=dhp2[0][2][2]/st;

  return;
} /* magfis */
